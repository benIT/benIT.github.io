<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[benIT]]></title>
    <link href="/atom.xml" rel="self"/>
    <link href="/"/>
    <updated>2017-03-31T15:12:51+00:00</updated>
    <id>/</id>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[Setting up a cool php development environment]]></title>
            <link href="/blog/2017/03/31/setting-up-a-php-cool-development-environment"/>
            <updated>2017-03-31T00:00:00+00:00</updated>
            <id>/blog/2017/03/31/setting-up-a-php-cool-development-environment</id>
            <content type="html"><![CDATA[<p>In this post, I list the components of my dev environment.</p>

<h2 id="make-use-of-a-cool-virtualisation-solution">Make use of a cool virtualisation solution</h2>

<p>I choose <a href="https://www.vagrantup.com/">Vagrant</a>. Take the time to create cool provisioning scripts. In case of problem, you will be able to set up quickly your env!
<strong>VERSION your provisioning scripts!</strong></p>

<h2 id="reproduce-the-exact-same-stack-than-the-prod-env">Reproduce the exact same stack than the prod env</h2>

<ul>
<li>OS</li>
<li>php version</li>
<li>php.ini conf: /etc/php5/apache2/php.ini &amp; /etc/php5/cli/php.ini</li>
<li>apache version</li>
<li>apache VHOST</li>
<li>db version</li>
<li>system permission</li>
</ul>

<h2 id="turn-on-debug-mode-and-error-printing">Turn on debug mode and error printing</h2>

<p>In php.ini files:</p>

<pre><code>    error_reporting = E_ALL ^ E_NOTICE ^ E_WARNING
    error_reporting = E_ALL ^ E_NOTICE ^ E_WARNING
    sudo service apache2 restart
</code></pre>

<h2 id="make-use-of-a-cool-source-control">Make use of a cool source control</h2>

<p>I use gitlab: git+wiki+tracker</p>

<h2 id="make-use-of-a-cool-php-ide">Make use of a cool PHP IDE</h2>

<p>I make use <a href="https://www.jetbrains.com/phpstorm/">PHPSTORM</a> because of:</p>

<ul>
<li>debugger integration</li>
<li>completion</li>
<li>external tools integration</li>
<li>framework integration</li>
<li>database integration</li>
<li>live templates</li>
<li>source control integration</li>
</ul>

<h2 id="set-up-a-cool-debugger">Set up a cool debugger</h2>

<p>I use XDEBUG embed in vagrant VM with PHPSTORM on host machine which is very very very nice.</p>

<ul>
<li><p><a href="https://confluence.jetbrains.com/display/PhpStorm/Working+with+Advanced+Vagrant+features+in+PhpStorm">ressource to set up vagrant with phpstorm</a></p></li>
<li><p><a href="https://www.jetbrains.com/phpstorm/marklets/">bookmarle generator</a></p></li>
</ul>

<p>On the guest machine :</p>

<pre><code>    sudo apt-get install -y php-pear php5-dev
    sudo pecl install xdebug
</code></pre>

<p>php.ini file:</p>

<pre><code>    [xdebug]
    zend_extension=/usr/lib/php5/20131226/xdebug.so
    xdebug.remote_enable=1
    xdebug.remote_host=10.0.2.2
    xdebug.remote_port=9000
</code></pre>

<h2 id="set-up-a-mailer">Set up a mailer</h2>

<p>Setting up <code>sendMail</code> is quiet complicated whereas setting up <code>ssmtp</code> is easy.</p>

<p><a href="http://www.tuto-linux.com/tutoriel/ssmtp-installation-et-configuration/">Follow that tutorial to install ssmtp.</a></p>

<p>Do not forget to <a href="https://myaccount.google.com/lesssecureapps?pli=1">edit google lesssecureappsoption</a></p>

<h2 id="set-up-a-cool-build-tool">Set up a cool build tool</h2>

<p>I use <a href="https://www.phing.info/">Phing</a> to build and deploy.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Consuming a Moodle webservice]]></title>
            <link href="/blog/2017/03/29/consumming-a-moodle-webservice"/>
            <updated>2017-03-29T00:00:00+00:00</updated>
            <id>/blog/2017/03/29/consumming-a-moodle-webservice</id>
            <content type="html"><![CDATA[<p>This post describes how to consume a Moodle core webservice.</p>

<h2 id="set-up-moodle">Set up Moodle</h2>

<h3 id="enable-rest-protocol">Enable REST protocol</h3>

<p>In <code>Dashboard / ► Site administration / ► Plugins / ► Web services / ► Manage protocols</code></p>

<ul>
<li>enable REST protocol.</li>
<li>enable <code>Web services documentation</code> too.</li>
</ul>

<h3 id="create-a-custom-webservice">Create a custom webservice</h3>

<p>In <code>Dashboard / ► Site administration / ► Plugins / ► Web services / ► External services</code></p>

<ul>
<li>add a custom services named <code>test ws</code> for example</li>
</ul>

<h3 id="create-a-custom-user-for-webservice">Create a custom user for webservice</h3>

<p>In <code>Dashboard / ► Site administration / ► Users / ► Accounts / ► Add a new user</code></p>

<ul>
<li>create a <code>wsuser</code> user.</li>
</ul>

<h3 id="create-a-custom-role-for-webservice">Create a custom role for webservice</h3>

<p>In <code>Dashboard / ► Site administration / ► Users / ► Permissions / ► Define roles</code></p>

<ul>
<li>create a <code>ws_user_role</code>.</li>
<li>allow at least <code>Create a web service token</code> </li>
</ul>

<h3 id="assign-role-to-user">Assign role to user</h3>

<p><code>Dashboard / ► Site administration / ► Users / ► Permissions / ► Assign system roles</code></p>

<h2 id="test">Test</h2>

<h3 id="get-a-cool-rest-client">Get a cool REST client</h3>

<p>Getting a user friendly REST client is important, <a href="https://www.getpostman.com/">POSTMAN is pretty cool</a>.</p>

<h3 id="get-a-token">Get a token</h3>

<p>Make a GET request to get a token.</p>

<p>For instance:<code>https://192.168.33.10/login/token.php?service=test_ws&amp;username=wsuser&amp;password=Wsuser123456-</code>. You should get:</p>

<pre><code>        {
          "token": "19f315a127eef1f7f381da40fefd7b75"
        }
</code></pre>

<h3 id="consuming-a-moodle-core-webservice">Consuming a Moodle core webservice</h3>

<p>Now we get a token! So let's consume the <code>core_course_get_courses</code> WS. Results in JSON with <code>moodlewsrestformat=json</code>.</p>

<p>Make a POST request on <code>https://192.168.33.10/webservice/rest/server.php?wstoken=19f315a127eef1f7f381da40fefd7b75&amp;wsfunction=core_course_get_courses&amp;options[ids][0]=1&amp;moodlewsrestformat=json</code>. You should get :</p>

<pre><code>        [
          {
            "id": 1,
            "shortname": "test",
            "categoryid": 0,
            "fullname": "Site de test",
            "summary": "",
            "summaryformat": 1,
            "format": "site",
            "startdate": 0,
            "numsections": 1
          }
        ]
</code></pre>

<h3 id="api-documentation">API DOCUMENTATION</h3>

<p>This can be found at <code>Dashboard / ► Site administration / ► Plugins / ► Web services / ► API Documentation</code></p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Getting started with Sculpin]]></title>
            <link href="/blog/2017/03/28/getting-started-with-sculpin"/>
            <updated>2017-03-28T00:00:00+00:00</updated>
            <id>/blog/2017/03/28/getting-started-with-sculpin</id>
            <content type="html"><![CDATA[<h2 id="download%2C-install-and-configure">Download, install and configure</h2>

<p><a href="https://sculpin.io/">Sculpin</a> is a static site generator written in PHP. It converts Markdown files, Twig templates and standard HTML into a static HTML site that can be easily deployed.
As this site, it can be hosted on GITHUB pages.</p>

<ul>
<li>fork the <a href="https://github.com/sculpin/sculpin-blog-skeleton">sculpin-blog-skeleton repo</a></li>
<li><p>clone the repo and install Sculpin dependencies:</p>

<pre><code> git clone git@github.com:benIT/github-blog.git         
 cd github-blog
 composer install
</code></pre></li>
<li><p>edit blog settings in app/config/sculpin_site.yml</p></li>
<li><p>run a local webserver on port 8000 to see your edits</p>

<pre><code> php vendor/bin/sculpin generate --watch --server
</code></pre></li>
<li><p>add content in <code>/source/_posts</code> folder</p></li>
</ul>

<h2 id="create-content">Create content</h2>

<ul>
<li>edit your post content</li>
<li>check result at localhost:8000</li>
<li><p>when result is enough good, generate site using :</p>

<pre><code>php vendor/bin/sculpin generate --env=prod
</code></pre></li>
<li><p>Your site html content should be available at <code>output_prod</code>, it's the content of that folder that must be hosted on your github page</p></li>
</ul>

<h2 id="deploy-on-github">Deploy on github</h2>

<h3 id="about-github-pages">About github pages</h3>

<p>You can host html generaed  at 3 different locations :</p>

<ul>
<li>on <code>master</code> branch </li>
<li>or <code>master</code> branch in <code>docs</code> folder</li>
<li><p>on <code>gh-pages</code> branch</p>

<p><strong>But for your personal pages, you can only host in repo named <code>benit.github.io</code> on the <code>master</code> branch. 
This means, that we need 2 repos : one for source control and another one for hosting our github pages.</strong>
Thus, I create the following repos : <code>github-blog.git</code> and <code>benit.github.io</code></p></li>
</ul>

<h3 id="how-to-publish-the-content-to-the-repo-that-hosts-your-github-pages-%3F">How to publish the content to the repo that hosts your github pages ?</h3>

<p>I edit <a href="https://github.com/benIT/github-blog/blob/master/publish.sh">the shell script named <code>publish.sh</code></a>.
 The script is in charge of:</p>

<ul>
<li>generating the html</li>
<li>rsyncing the <code>output_prod</code> folder with the <code>benit.github.io</code>. </li>
<li>commiting </li>
<li>pushing</li>
</ul>
]]></content>
        </entry>
    </feed>