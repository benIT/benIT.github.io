<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[benIT]]></title>
    <link href="/atom.xml" rel="self"/>
    <link href="/"/>
    <updated>2017-06-12T08:09:12+00:00</updated>
    <id>/</id>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[Setting up git with multiple accounts]]></title>
            <link href="/blog/2017/06/12/setting-up-git-with-multiple-accounts"/>
            <updated>2017-06-12T00:00:00+00:00</updated>
            <id>/blog/2017/06/12/setting-up-git-with-multiple-accounts</id>
            <content type="html"><![CDATA[<h2 id="git-install">git install</h2>

<pre><code>sudo apt-get install git
</code></pre>

<h3 id="git-config">git config</h3>

<pre><code>git config --global user.email benoit.works@gmail.com
git config --global user.name ben
cat .gitconfig 
[user]
    email = benoit.works@gmail.com
    name = ben
</code></pre>

<h3 id="ssh-keys">ssh keys</h3>

<h4 id="github-key">github key</h4>

<pre><code>ben@debian:~$ ssh-keygen -t rsa -C "benoit.works@gmail.com"
Generating public/private rsa key pair.
Enter file in which to save the key (/home/ben/.ssh/id_rsa): /home/ben/.ssh/id_rsa_github
Enter passphrase (empty for no passphrase): 
Enter same passphrase again: 
Your identification has been saved in /home/ben/.ssh/id_rsa_github.
Your public key has been saved in /home/ben/.ssh/id_rsa_github.pub.
The key fingerprint is:
e0:ff:69:e3:fd:67:9b:97:7e:3b:d7:0c:5e:c8:98:94 benoit.works@gmail.com
The key's randomart image is:
+---[RSA 2048]----+
|                 |
|                 |
|      .      .   |
|     . .    E    |
|      . S  . + . |
|       .    o + .|
|        .    . +o|
|         .oo  .oX|
|         o+...oBB|
+-----------------+
ben@debian:~$ ls -al .ssh/
total 16
drwx------  2 ben ben 4096 juin   7 10:01 .
drwxr-xr-x 21 ben ben 4096 juin   7 10:00 ..
-rw-------  1 ben ben 1675 juin   7 10:01 id_rsa_github
-rw-r--r--  1 ben ben  404 juin   7 10:01 id_rsa_github.pub


ben@debian:~$ ssh-add ~/.ssh/id_rsa_github
Identity added: /home/ben/.ssh/id_rsa_github (rsa w/o comment)
</code></pre>

<p>Add the public key to your github account.</p>

<h4 id="bitbucket-key">bitbucket key</h4>

<pre><code>ben@debian ~ $ ssh-keygen -t rsa -C "benoit.works@gmail.com"
Generating public/private rsa key pair.
Enter file in which to save the key (/home/ben/.ssh/id_rsa): /home/ben/.ssh/id_rsa_bitbucket
Enter passphrase (empty for no passphrase): 
Enter same passphrase again: 
Your identification has been saved in /home/ben/.ssh/id_rsa_bitbucket.
Your public key has been saved in /home/ben/.ssh/id_rsa_bitbucket.pub.
The key fingerprint is:
04:75:ba:a3:71:a4:1e:3e:0a:31:f8:a1:b3:70:57:81 benoit.works@gmail.com
The key's randomart image is:
+---[RSA 2048]----+
|      ... .      |
|     . . o       |
|    E . +        |
| .     = .       |
|. +   = S        |
| o + + = .       |
|+ + . =          |
|.+ o . .         |
|.   .            |
+-----------------+

ben@debian ~ $ ssh-add ~/.ssh/id_rsa_bitbucket
Identity added: /home/ben/.ssh/id_rsa_bitbucket (rsa w/o comment)
</code></pre>

<p>Add the public key to your bitbucket account.</p>

<h3 id="ssh-config-file">ssh config file</h3>

<p>Edit <code>~/.ssh/config file</code></p>

<pre><code># Default GitHub user
Host github.com
 HostName github.com
 PreferredAuthentications publickey
 IdentityFile ~/.ssh/id_rsa_github

# bitbucket account
Host bitbucket.org
 HostName bitbucket.org
 PreferredAuthentications publickey
 IdentityFile ~/.ssh/id_rsa_bitbucket
</code></pre>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Installing Vagrant]]></title>
            <link href="/blog/2017/06/12/install-vagrant"/>
            <updated>2017-06-12T00:00:00+00:00</updated>
            <id>/blog/2017/06/12/install-vagrant</id>
            <content type="html"><![CDATA[<h2 id="install-virtual-box">Install virtual box</h2>

<pre><code>sudo apt-get install virtualbox
</code></pre>

<h2 id="install-vagrant">Install vagrant</h2>

<ul>
<li><p>Download [Vagrant deb package] (https://www.vagrantup.com/downloads.html)</p>

<p>cd /tmp/mozilla_ben0
dpkg -i vagrant_1.9.5_x86_64.deb</p></li>
<li><p>Clone your vagrant repo and install it!</p></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Create a debian live usb drive]]></title>
            <link href="/blog/2017/06/12/create-a-debian-iso-live-usb-drive"/>
            <updated>2017-06-12T00:00:00+00:00</updated>
            <id>/blog/2017/06/12/create-a-debian-iso-live-usb-drive</id>
            <content type="html"><![CDATA[<h2 id="download-a-debian-8-iso">Download a debian 8 iso</h2>

<ul>
<li>Download a debian iso from <a href="https://cdimage.debian.org/debian-cd/current-live/amd64/iso-hybrid/">debian official site</a></li>
</ul>

<h2 id="format-your-usb-key-and-flag-it-as-bootable">Format your usb key and flag it as bootable</h2>

<ul>
<li>install gparted: <code>sudo apt-get install gparted</code></li>
<li>identify your usb drive with: <code>fdisk -l</code></li>
<li>format it as <code>ntfs</code>(so the drive can be used with windows too)</li>
<li>flag it as 'boot'</li>
<li>unmount the key</li>
</ul>

<h2 id="burn-it-to-a-usb-flash-drive">Burn it to a usb flash drive</h2>

<p>Copy iso file to key using <code>dd</code></p>

<pre><code>sudo dd bs=4M if=debian-live-8.8.0-amd64-gnome-desktop.iso of=/dev/sdb
</code></pre>

<ul>
<li>eject the key</li>
<li>restart PC anc check from BIOS that PC will boot from usb devices at first</li>
<li>install debian</li>
</ul>

<h2 id="set-up-sources.list">Set up sources.list</h2>

<p>After install from live usb whitout internet, edit as follow <code>/etc/apt/sources.list</code>
    # deb cdrom:[Debian GNU/Linux 8 <em>Jessie</em> - Official Snapshot amd64 LIVE/INSTALL Binary 20170506-15:01]/ jessie main</p>

<pre><code>#deb cdrom:[Debian GNU/Linux 8 _Jessie_ - Official Snapshot amd64 LIVE/INSTALL Binary 20170506-15:01]/ jessie main

# Line commented out by installer because it failed to verify:
#deb http://security.debian.org/ jessie/updates main
# Line commented out by installer because it failed to verify:
#deb-src http://security.debian.org/ jessie/updates main

deb http://ftp.fr.debian.org/debian/ jessie main contrib non-free
deb http://security.debian.org/ jessie/updates main contrib non-free
</code></pre>

<p>Update the package index:</p>

<pre><code>apt-get update
</code></pre>

<p>And upgrade packages:</p>

<pre><code>apt-get upgrade
</code></pre>

<p>Let's check everything is ok by installing a common packages:</p>

<pre><code>apt-get install -y vim git
</code></pre>

<h2 id="sudoerfile">sudoerfile</h2>

<p>Add the existing 'ben' user to the 'sudo' group:</p>

<pre><code>su
adduser ben sudo
</code></pre>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Getting started with npm]]></title>
            <link href="/blog/2017/05/29/getting-started-with-npm"/>
            <updated>2017-05-29T00:00:00+00:00</updated>
            <id>/blog/2017/05/29/getting-started-with-npm</id>
            <content type="html"><![CDATA[<h2 id="npm-global-configuration-file">npm global configuration file</h2>

<pre><code>    vim ~/.npmrc
</code></pre>

<h2 id="list-npm-globally-installed-modules">list npm globally installed modules</h2>

<pre><code>    npm list -g
</code></pre>

<h2 id="install-modules-globally">Install modules globally</h2>

<pre><code>sudo npm install -g my-module

sudo npm install -g gulp-autoprefixer gulp-clean gulp-concat gulp-cssbeautify gulp-csscomb gulp-csso gulp-if gulp-jshint gulp-less gulp-load-plugins gulp-ng-annotate gulp-rename gulp-uglify minimist
ls /usr/local/lib/node_modules
</code></pre>

<h2 id="install-modules-locally">Install modules locally</h2>

<p>Modules will be installed in <code>node_modules</code> folder.</p>

<h3 id="dev-modules-with---save-dev-option">dev modules with --save-dev option</h3>

<pre><code>npm install --save-dev gulp-cssbeautify gulp-csscomb gulp-csso gulp-jshint gulp-less gulp-load-plugins gulp-rename
</code></pre>

<h3 id="non-dev-modules-with---save-option">non dev modules with --save option</h3>

<pre><code>npm install angular-i18n --save
</code></pre>

<h2 id="link-our-project-modules-to-the-global-installed-node-modules">Link our project modules to the global installed node modules</h2>

<pre><code>cd my-app
npm link gulp-autoprefixer gulp-clean gulp-concat gulp-cssbeautify gulp-csscomb gulp-csso gulp-if gulp-jshint gulp-less gulp-load-plugins gulp-ng-annotate gulp-rename gulp-uglify minimist
npm install 
</code></pre>

<h2 id="speed-up-npm">Speed up npm</h2>

<p><code>npm install</code> can be very long, so let's try to speed up that!</p>

<h3 id="disable-progress">Disable progress</h3>

<pre><code>npm config set progress false
</code></pre>

<h3 id="setting-up-a-local-cache-server">Setting up a local cache server</h3>

<p>Inspired from this <a href="http://willcodefor.beer/setup-your-own-npm-cache-server/">ressource</a>.</p>

<h4 id="installing-npm-proxy-cache">Installing npm-proxy-cache</h4>

<pre><code>sudo apt-get install -y nodejs npm
npm config set prefix '~/.npm-packages'  
export PATH="$PATH:$HOME/.npm-packages/bin"
npm install -g forever npm-proxy-cache  
ln -s /usr/bin/nodejs /usr/bin/node
</code></pre>

<h4 id="starting-the-cache-server">Starting the cache server</h4>

<pre><code>sudo forever /usr/local/lib/node_modules/npm-proxy-cache/bin/npm-proxy-cache  -e -t 600000 -h localhost
</code></pre>

<p>You should see that the server is running on 8080 port:</p>

<pre><code>[2017-05-29 13:13:11.725] [INFO] proxy - Listening on localhost:8080 [6172]
</code></pre>

<h4 id="configuring-npm-proxy-cache">Configuring npm-proxy-cache</h4>

<pre><code>npm config set proxy http://localhost:8080/  
npm config set https-proxy http://localhost:8080
npm config set strict-ssl false  
</code></pre>

<h4 id="testing-the-cache-server">Testing the cache server</h4>

<pre><code>cd my-app
rm -rf node_modules
npm install
</code></pre>

<h4 id="automating-server-boot">Automating server boot</h4>

<p>todo</p>

<h4 id="yeah%2C-it-works%21">Yeah, it works!</h4>

<pre><code>[2017-05-29 13:13:11.725] [INFO] proxy - Listening on localhost:8080 [6172]
[2017-05-29 13:18:55.662] [INFO] proxy - cache https://registry.npmjs.org/angular-route
[2017-05-29 13:18:55.679] [INFO] proxy - cache https://registry.npmjs.org/angular-i18n
[2017-05-29 13:18:55.702] [INFO] proxy - cache https://registry.npmjs.org/angularjs-datepicker
[2017-05-29 13:18:55.703] [INFO] proxy - cache https://registry.npmjs.org/bootstrap
[2017-05-29 13:18:55.711] [INFO] proxy - cache https://registry.npmjs.org/chart.js
[2017-05-29 13:18:55.714] [INFO] proxy - cache https://registry.npmjs.org/jquery
[2017-05-29 13:18:55.716] [INFO] proxy - cache https://registry.npmjs.org/isteven-angular-multiselect
[2017-05-29 13:18:55.719] [INFO] proxy - cache https://registry.npmjs.org/gulp
[2017-05-29 13:18:55.723] [INFO] proxy - cache https://registry.npmjs.org/gulp-autoprefixer
...
</code></pre>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Setting up angularjs and chartjs in Moodle 3.X]]></title>
            <link href="/blog/2017/04/18/setting-up-angular-in moodle-3"/>
            <updated>2017-04-18T00:00:00+00:00</updated>
            <id>/blog/2017/04/18/setting-up-angular-in moodle-3</id>
            <content type="html"><![CDATA[<p>I was wondering how can I integrate angularjs to my moodle plugin. 
Moodle isn't designed as frontend/backend, so how can I integrate angularjs with smashing moodle?
I create a POOC, let's checkout that:</p>

<ul>
<li><p>Create a custom template page : <a href="https://github.com/benIT/moodle_report_angularjspooc/blob/master/templates/reportindex_page.mustache">the custom template</a> will be only used to put <code>ng-app</code> directive</p></li>
<li><p>Load <a href="https://github.com/benIT/moodle_report_angularjspooc/blob/master/index.php#L26">all javascript</a> in the template page</p></li>
<li><p>Write PHP AJAX or Moodle Webservice to expose data:
In my case, I didn't care about exposing webservices so I choose to <a href="https://github.com/benIT/moodle_report_angularjspooc/blob/master/ajax.php">write a simple ajax page</a>.</p></li>
<li><p>Write your <a href="https://github.com/benIT/moodle_report_angularjspooc/tree/master/angular">angularjs code</a></p></li>
<li><p>Enjoy angularjs on moodle ! In this cas, we will use this to generate beautiful reports with Charts.js</p>

<p><strong><a href="https://github.com/benIT/moodle_report_angularjspooc">The Repository is available at github.</a></strong></p></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Filter functionality in Moodle Configurable Reports]]></title>
            <link href="/blog/2017/04/11/moodle-configurable-reports-filters"/>
            <updated>2017-04-11T00:00:00+00:00</updated>
            <id>/blog/2017/04/11/moodle-configurable-reports-filters</id>
            <content type="html"><![CDATA[<p>This post describes the filter functionality in Moodle Configurable Reports.</p>

<h2 id="create-the-sql-query">Create the sql query</h2>

<pre><code>    SELECT *
    from prefix_course
    WHERE
    1=1
    %%FILTER_COURSES:prefix_course.id%%
    %%FILTER_SEARCHTEXT:prefix_course.fullname:~%%
</code></pre>

<h2 id="add-filter-fields">Add filter fields</h2>

<p>Available filters are located in: <code>components/filters/</code> of Configurable Reports.</p>

<p>In the <code>filters</code> tab:</p>

<ul>
<li><p>add <code>Courses</code> that will refer to <code>%%FILTER_COURSES:prefix_course.id%%</code></p></li>
<li><p>add <code>Search text</code> that will refer to <code>%%FILTER_SEARCHTEXT:prefix_course.fullname:~%%</code></p></li>
</ul>

<h3 id="available-variables">Available variables</h3>

<pre><code>%%CATEGORYID%%
%%COURSEID%%
%%CURRENTUSER%%
%%DEBUG%%
%%FILTER_VAR%%
%%STARTTIME%%’,’%%ENDTIME%%
%%USERID%%
%%WWWROOT%%
</code></pre>

<h3 id="available-filters">Available filters</h3>

<pre><code>%%FILTER_CATEGORIES:
%%FILTER_COURSEMODULEID:
%%FILTER_COURSEMODULEFIELDS:
%%FILTER_COURSEMODULE:
%%FILTER_COURSES:
%%FILTER_COURSEENROLLEDSTUDENTS:
%%FILTER_USERS:
%%FILTER_ROLE:
%%FILTER_SEARCHTEXT:
%%FILTER_SEMESTER:
%%FILTER_STARTTIME:
%%FILTER_ENDTIME:
%%FILTER_SUBCATEGORIES:
%%FILTER_COURSEUSER:
%%FILTER_SYSTEMUSER:
%%FILTER_YEARHEBREW:
%%FILTER_YEARNUMERIC:
</code></pre>

<h2 id="result">Result</h2>

<p>In the <code>view report</code> tab, you will get the 2 filters!</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Setting up a cool php development environment]]></title>
            <link href="/blog/2017/03/31/setting-up-a-php-cool-development-environment"/>
            <updated>2017-03-31T00:00:00+00:00</updated>
            <id>/blog/2017/03/31/setting-up-a-php-cool-development-environment</id>
            <content type="html"><![CDATA[<p>In this post, I list the components of my dev environment. This list can be useful when initializing a new project or starting a new job.</p>

<h2 id="make-use-of-a-cool-virtualisation-solution">Make use of a cool virtualisation solution</h2>

<p>I choose <a href="https://www.vagrantup.com/">Vagrant</a>. Take the time to create cool provisioning scripts. In case of problem, you will be able to set up quickly your env!
<strong>VERSION your provisioning scripts!</strong></p>

<h2 id="reproduce-the-exact-same-stack-than-the-prod-env">Reproduce the exact same stack than the prod env</h2>

<ul>
<li>OS</li>
<li>php version</li>
<li>php.ini conf: /etc/php5/apache2/php.ini &amp; /etc/php5/cli/php.ini</li>
<li>apache version</li>
<li>apache VHOST</li>
<li>db version</li>
<li>system permission</li>
</ul>

<p><strong>Keep one VM/project do not host several projects under the same VM. If you need a laboratory VM, create a dedicated one!</strong></p>

<h2 id="turn-on-debug-mode-and-error-printing">Turn on debug mode and error printing</h2>

<p>Edit in php.ini files:</p>

<pre><code>    error_reporting = E_ALL ^ E_NOTICE ^ E_WARNING
    display_errors = on        
</code></pre>

<p>Restart apache:</p>

<pre><code>    sudo service apache2 restart
</code></pre>

<h2 id="make-use-of-a-cool-source-control">Make use of a cool source control</h2>

<p>I use gitlab: git+wiki+tracker. When you commit, do not forget to make link between commit and ticket reference.</p>

<h2 id="make-use-of-a-cool-php-ide">Make use of a cool PHP IDE</h2>

<p>I use <a href="https://www.jetbrains.com/phpstorm/">PHPSTORM</a> because of:</p>

<ul>
<li>debugger integration</li>
<li>completion</li>
<li>external tools integration</li>
<li>framework integration</li>
<li>database integration</li>
<li>live templates</li>
<li>source control integration</li>
</ul>

<h2 id="set-up-a-cool-debugger">Set up a cool debugger</h2>

<p>I use XDEBUG embed in vagrant VM with PHPSTORM on host machine which is very very very nice.</p>

<ul>
<li><p><a href="https://confluence.jetbrains.com/display/PhpStorm/Working+with+Advanced+Vagrant+features+in+PhpStorm">ressource to set up vagrant with phpstorm</a></p></li>
<li><p><a href="https://www.jetbrains.com/phpstorm/marklets/">bookmarle generator</a></p></li>
</ul>

<p>On the guest machine :</p>

<pre><code>    sudo apt-get install -y php-pear php5-dev
    sudo pecl install xdebug
</code></pre>

<p>php.ini file:</p>

<pre><code>    [xdebug]
    zend_extension=/usr/lib/php5/20131226/xdebug.so
    xdebug.remote_enable=1
    xdebug.remote_host=10.0.2.2
    xdebug.remote_port=9000
</code></pre>

<h2 id="set-up-a-mailer">Set up a mailer</h2>

<p>Setting up <code>sendMail</code> is quiet complicated whereas setting up <code>ssmtp</code> is easy.</p>

<p><a href="http://www.tuto-linux.com/tutoriel/ssmtp-installation-et-configuration/">Follow that tutorial to install ssmtp.</a></p>

<p>Do not forget to <a href="https://myaccount.google.com/lesssecureapps?pli=1">edit google lesssecureappsoption</a></p>

<h2 id="set-up-a-cool-build-tool">Set up a cool build tool</h2>

<p>I use <a href="https://www.phing.info/">Phing</a> to build and deploy.</p>

<pre><code>wget -q http://www.phing.info/get/phing-latest.phar
sudo mv phing-latest.phar /usr/local/lib/phing.phar
chmod +x /usr/local/lib/phing.phar
sudo ln -s /usr/local/lib/phing.phar /usr/local/bin/phing

pear install VersionControl_Git-alpha
</code></pre>

<h2 id="things-that-must-be-under-source-control">Things that must be under source control</h2>

<ul>
<li>Provisioning script</li>
<li>Source code</li>
<li>Build job</li>
<li><em>VM configuration (alias, conf file) can also be versioned.</em>  </li>
</ul>

<p><strong>With that you should be able to automate deployment and rebuild solution from scratch!</strong></p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Consuming a Moodle webservice]]></title>
            <link href="/blog/2017/03/29/consumming-a-moodle-webservice"/>
            <updated>2017-03-29T00:00:00+00:00</updated>
            <id>/blog/2017/03/29/consumming-a-moodle-webservice</id>
            <content type="html"><![CDATA[<p>This post describes how to consume a Moodle core webservice.</p>

<h2 id="set-up-moodle">Set up Moodle</h2>

<h3 id="enable-rest-protocol">Enable REST protocol</h3>

<p>In <code>Dashboard / ► Site administration / ► Plugins / ► Web services / ► Manage protocols</code></p>

<ul>
<li>enable REST protocol.</li>
<li>enable <code>Web services documentation</code> too.</li>
</ul>

<h3 id="create-a-custom-webservice">Create a custom webservice</h3>

<p>In <code>Dashboard / ► Site administration / ► Plugins / ► Web services / ► External services</code></p>

<ul>
<li>add a custom services named <code>test ws</code> for example</li>
</ul>

<h3 id="create-a-custom-user-for-webservice">Create a custom user for webservice</h3>

<p>In <code>Dashboard / ► Site administration / ► Users / ► Accounts / ► Add a new user</code></p>

<ul>
<li>create a <code>wsuser</code> user.</li>
</ul>

<h3 id="create-a-custom-role-for-webservice">Create a custom role for webservice</h3>

<p>In <code>Dashboard / ► Site administration / ► Users / ► Permissions / ► Define roles</code></p>

<ul>
<li>create a <code>ws_user_role</code>.</li>
<li>allow at least <code>Create a web service token</code> </li>
</ul>

<h3 id="assign-role-to-user">Assign role to user</h3>

<p><code>Dashboard / ► Site administration / ► Users / ► Permissions / ► Assign system roles</code></p>

<h2 id="test">Test</h2>

<h3 id="get-a-cool-rest-client">Get a cool REST client</h3>

<p>Getting a user friendly REST client is important, <a href="https://www.getpostman.com/">POSTMAN is pretty cool</a>.</p>

<h3 id="get-a-token">Get a token</h3>

<p>Make a GET request to get a token.</p>

<p>For instance:<code>https://192.168.33.10/login/token.php?service=test_ws&amp;username=wsuser&amp;password=Wsuser123456-</code>. You should get:</p>

<pre><code>        {
          "token": "19f315a127eef1f7f381da40fefd7b75"
        }
</code></pre>

<h3 id="consuming-a-moodle-core-webservice">Consuming a Moodle core webservice</h3>

<p>Now we get a token! So let's consume the <code>core_course_get_courses</code> WS. Results in JSON with <code>moodlewsrestformat=json</code>.</p>

<p>Make a POST request on <code>https://192.168.33.10/webservice/rest/server.php?wstoken=19f315a127eef1f7f381da40fefd7b75&amp;wsfunction=core_course_get_courses&amp;options[ids][0]=1&amp;moodlewsrestformat=json</code>. You should get :</p>

<pre><code>        [
          {
            "id": 1,
            "shortname": "test",
            "categoryid": 0,
            "fullname": "Site de test",
            "summary": "",
            "summaryformat": 1,
            "format": "site",
            "startdate": 0,
            "numsections": 1
          }
        ]
</code></pre>

<h3 id="api-documentation">API DOCUMENTATION</h3>

<p>This can be found at <code>Dashboard / ► Site administration / ► Plugins / ► Web services / ► API Documentation</code></p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Getting started with Sculpin]]></title>
            <link href="/blog/2017/03/28/getting-started-with-sculpin"/>
            <updated>2017-03-28T00:00:00+00:00</updated>
            <id>/blog/2017/03/28/getting-started-with-sculpin</id>
            <content type="html"><![CDATA[<h2 id="download%2C-install-and-configure">Download, install and configure</h2>

<p><a href="https://sculpin.io/">Sculpin</a> is a static site generator written in PHP. It converts Markdown files, Twig templates and standard HTML into a static HTML site that can be easily deployed.
As this site, it can be hosted on GITHUB pages.</p>

<ul>
<li>fork the <a href="https://github.com/sculpin/sculpin-blog-skeleton">sculpin-blog-skeleton repo</a></li>
<li><p>clone the repo and install Sculpin dependencies:</p>

<pre><code> git clone git@github.com:benIT/github-blog.git         
 cd github-blog
 composer install
</code></pre></li>
<li><p>edit blog settings in app/config/sculpin_site.yml</p></li>
<li><p>run a local webserver on port 8000 to see your edits</p>

<pre><code> php vendor/bin/sculpin generate --watch --server
</code></pre></li>
<li><p>add content in <code>/source/_posts</code> folder</p></li>
</ul>

<h2 id="create-content">Create content</h2>

<ul>
<li>edit your post content</li>
<li>check result at localhost:8000</li>
<li><p>when result is enough good, generate site using :</p>

<pre><code>php vendor/bin/sculpin generate --env=prod
</code></pre></li>
<li><p>Your site html content should be available at <code>output_prod</code>, it's the content of that folder that must be hosted on your github page</p></li>
</ul>

<h2 id="deploy-on-github">Deploy on github</h2>

<h3 id="about-github-pages">About github pages</h3>

<p>You can host html generated  at 3 different locations :</p>

<ul>
<li>on <code>master</code> branch </li>
<li>or <code>master</code> branch in <code>docs</code> folder</li>
<li><p>on <code>gh-pages</code> branch</p>

<p><strong>But for your personal pages, you can only host in repo named <code>benit.github.io</code> on the <code>master</code> branch. 
This means, that we need 2 repos : one for source control and another one for hosting our github pages.</strong>
Thus, I create the following repos : <code>github-blog.git</code> and <code>benit.github.io</code></p></li>
</ul>

<h3 id="how-to-publish-the-content-to-the-repo-that-hosts-your-github-pages-%3F">How to publish the content to the repo that hosts your github pages ?</h3>

<p>I edit <a href="https://github.com/benIT/github-blog/blob/master/publish.sh">the shell script named <code>publish.sh</code></a>.
 The script is in charge of:</p>

<ul>
<li>generating the html</li>
<li>rsyncing the <code>output_prod</code> folder of the source control repo with the <code>benit.github.io</code>repo. </li>
<li>commiting on the 2 repos with the same commit message</li>
<li>pushing on the 2 repo</li>
</ul>

<p>Usage:</p>

<pre><code>./publish.sh "edit post about Setting up a cool php development environment"
</code></pre>
]]></content>
        </entry>
    </feed>