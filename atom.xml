<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[benIT]]></title>
    <link href="/atom.xml" rel="self"/>
    <link href="/"/>
    <updated>2017-11-09T10:18:47+00:00</updated>
    <id>/</id>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[Moodle 3.X: activate debug whithout GUI]]></title>
            <link href="/blog/2017/11/09/moodle-activate-debug-using-sql"/>
            <updated>2017-11-09T00:00:00+00:00</updated>
            <id>/blog/2017/11/09/moodle-activate-debug-using-sql</id>
            <content type="html"><![CDATA[<p>If you need to activate debug but you cannot access moodle admin page, this article is for you:</p>

<h2 id="step-1%3A-note-original-settings">Step 1: note original settings</h2>

<pre><code>SELECT name, value
FROM mdl_config
where name ='debug' or name ='debugdisplay'
;
</code></pre>

<p>for instance :</p>

<pre><code>debug   0
debugdisplay    0
</code></pre>

<h2 id="step-2-%3A-setup-debug-config-in-db">Step 2 : setup debug config in db</h2>

<pre><code>UPDATE mdl_config SET VALUE = 32767 WHERE name = 'debug';
UPDATE mdl_config SET VALUE = 1 WHERE name = 'debugdisplay';
</code></pre>

<h2 id="step-3%3A-clear-cache-from-cli">Step 3: clear cache from CLI</h2>

<pre><code>php  moodle/admin/cli/purge_caches.php
</code></pre>

<h2 id="step-4%3A-restore-original-settings">Step 4: restore original settings</h2>

<pre><code>UPDATE mdl_config SET VALUE = 0 WHERE name = 'debug';
UPDATE mdl_config SET VALUE = 0 WHERE name = 'debugdisplay';
</code></pre>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[SSH key authentication]]></title>
            <link href="/blog/2017/11/06/ssh-key-authentication"/>
            <updated>2017-11-06T00:00:00+00:00</updated>
            <id>/blog/2017/11/06/ssh-key-authentication</id>
            <content type="html"><![CDATA[<p>Access your server using ssh key authentication.</p>

<p>If you loose your time, typing password, this is for you:</p>

<h2 id="generate-ssh-authentication-keys-on-the-client-side">Generate ssh authentication keys on the client side</h2>

<pre><code>ssh-keygen -t rsa
</code></pre>

<h2 id="create-a-.ssh-folder-on-the-server">Create a .ssh folder on the server</h2>

<pre><code>ssh pi@192.168.1.84 mkdir -p .ssh
</code></pre>

<h2 id="grant-the-client-to-access-to-the-server-using-public-key">Grant the client to access to the server using public key</h2>

<pre><code>cat .ssh/id_local.pub | ssh pi@192.168.1.84 'cat &gt;&gt; .ssh/authorized_keys'
</code></pre>

<h2 id="connect-to-server-without-password">Connect to server without password</h2>

<pre><code>ssh pi@192.168.1.84
</code></pre>

<p>That's it, you can now access your server whithout typing your password!</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Apache2 survival sheet]]></title>
            <link href="/blog/2017/10/02/apache2-survival-sheet"/>
            <updated>2017-10-02T00:00:00+00:00</updated>
            <id>/blog/2017/10/02/apache2-survival-sheet</id>
            <content type="html"><![CDATA[<p>In this post, the most common Apache2 commands that I use are listed. This is not really interesting but I'm bored of asking google for it every week!</p>

<h2 id="virtual-host">Virtual host</h2>

<h2 id="enable-a-vhost">Enable a vhost</h2>

<pre><code>a2ensite video-app
</code></pre>

<h2 id="disable--a-vhost">Disable  a vhost</h2>

<pre><code>a2dissite video-app
</code></pre>

<h2 id="modules">Modules</h2>

<h3 id="list-enables%2Floaded-modules">List enables/loaded modules</h3>

<pre><code>apache2ctl -M
</code></pre>

<h3 id="enable-a-module">Enable a module</h3>

<pre><code>sudo a2enmod rewrite
</code></pre>

<h2 id="server-status">Server status</h2>

<pre><code>apache2ctl status
</code></pre>

<h2 id="securing-a-vhost-with-a-basic-authentication">Securing a vhost with a basic authentication</h2>

<p>install utils:</p>

<pre><code>apt-get install apache2 apache2-utils
</code></pre>

<p>Generate password for user ben:</p>

<pre><code>htpasswd -c /etc/apache2/.htpasswd ben

cat /etc/apache2/.htpasswd
</code></pre>

<p>output:</p>

<pre><code> ben:$apr1$ULdWsbYp$eawlgBJZvKhr7L8V1NWGD/
</code></pre>

<p>Secure your vhost:</p>

<pre><code>    LISTEN 10000 
    &lt;VirtualHost *:10000&gt; 
            ServerAdmin webmaster@localhost
            DocumentRoot /home/pi/projects/videoapp/web/
             &lt;Directory /home/pi/projects/videoapp&gt;
                    Options Indexes FollowSymLinks
                    AllowOverride All
                    AuthType Basic
                    AuthName "Restricted Content"
                    AuthUserFile /etc/apache2/.htpasswd
                    Require valid-user
            &lt;/Directory&gt;
            ErrorLog /error-videoapp.log
            CustomLog /access-videoapp.log combined
    &lt;/VirtualHost&gt;
</code></pre>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[PostgreSQL survival sheet]]></title>
            <link href="/blog/2017/09/28/postgresql-survival-sheet"/>
            <updated>2017-09-28T00:00:00+00:00</updated>
            <id>/blog/2017/09/28/postgresql-survival-sheet</id>
            <content type="html"><![CDATA[<p>In this post, the most common pgsql commands that I use are listed. This is not really interesting but I'm bored of asking google for it every week!</p>

<h2 id="start-psql-command-line-utility">Start psql command line utility</h2>

<p>Using the <code>postgres</code> superuser:</p>

<pre><code>sudo -u postgres psql
</code></pre>

<h2 id="exit">Exit</h2>

<pre><code>postgres=# \q
</code></pre>

<h2 id="list-databases">List databases</h2>

<pre><code>postgres=# \l+
</code></pre>

<p>output:</p>

<pre><code>                                                                    List of databases
    Name    |  Owner   | Encoding |   Collate   |    Ctype    |   Access privileges   |  Size   | Tablespace |                Description                 
------------+----------+----------+-------------+-------------+-----------------------+---------+------------+--------------------------------------------
 clipbucket | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 |                       | 6532 kB | pg_default | 
 moodle     | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 |                       | 6532 kB | pg_default | 
 postgres   | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 |                       | 6532 kB | pg_default | default administrative connection database
 template0  | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +| 6409 kB | pg_default | unmodifiable empty database
            |          |          |             |             | postgres=CTc/postgres |         |            | 
 template1  | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +| 6532 kB | pg_default | default template for new databases
            |          |          |             |             | postgres=CTc/postgres |         |            | 
 testdb     | testdb   | UTF8     | en_US.UTF-8 | en_US.UTF-8 |                       | 6724 kB | pg_default | 
 videoapp   | videoapp | UTF8     | en_US.UTF-8 | en_US.UTF-8 |                       | 6724 kB | pg_default | 
(7 rows)
</code></pre>

<h2 id="drop-database">Drop database</h2>

<pre><code>postgres=# DROP DATABASE testdeploy;
</code></pre>

<p>output:</p>

<pre><code>postgres=# DROP DATABASE
</code></pre>

<h2 id="list-users">List users</h2>

<pre><code>postgres=# \du+
</code></pre>

<p>output :</p>

<pre><code>                                   List of roles
   Role name    |                   Attributes                   | Member of | Description 
----------------+------------------------------------------------+-----------+-------------
 clipbucket     |                                                | {}        | 
 manuel         | Create DB                                      | {}        | 
 moodle         |                                                | {}        | 
 postgres       | Superuser, Create role, Create DB, Replication | {}        | 
 testdb         | Create DB                                      | {}        | 
 testdeploy     | Create DB                                      | {}        | 
 testdeploytest | Create DB                                      | {}        | 
 videoapp       | Create DB                                      | {}        | 
</code></pre>

<h2 id="drop-user">Drop user</h2>

<pre><code>postgres=# DROP USER testdeploy;
</code></pre>

<p>output:</p>

<pre><code>DROP ROLE
</code></pre>

<h2 id="create-user">Create user</h2>

<pre><code>postgres=# CREATE USER videoapp WITH PASSWORD 'videoapp' CREATEDB ;
</code></pre>

<p>output:</p>

<pre><code>CREATE ROLE
</code></pre>

<h2 id="list-db-tables">List DB tables</h2>

<h3 id="switch-user">Switch user</h3>

<pre><code>postgres=# \c videoapp
</code></pre>

<p>output:</p>

<pre><code>You are now connected to database "videoapp" as user "postgres".
</code></pre>

<h3 id="list-tables">List tables</h3>

<pre><code>videoapp=# \dt+
</code></pre>

<p>output:</p>

<pre><code>                         List of relations
 Schema |    Name     | Type  |  Owner   |    Size    | Description 
--------+-------------+-------+----------+------------+-------------
 public | fos_user    | table | videoapp | 8192 bytes | 
 public | tag         | table | videoapp | 0 bytes    | 
 public | video       | table | videoapp | 8192 bytes | 
 public | videos_tags | table | videoapp | 0 bytes    | 
(4 rows)
</code></pre>

<h2 id="config-files">Config files</h2>

<h2 id="determine-which-config-file-is-in-use">Determine which config file is in use</h2>

<pre><code>SHOW config_file ;
</code></pre>

<h2 id="determine-which-hba-file-is-in-use">Determine which hba file is in use</h2>

<pre><code>SHOW hba_file;
</code></pre>

<h2 id="connection">Connection</h2>

<h3 id="remote-connection">Remote connection</h3>

<p>In <code>postgresql.conf</code>:</p>

<pre><code>listen_addresses = '*'
</code></pre>

<p>In <code>pg_hba.conf</code>:</p>

<pre><code>host  all  all 0.0.0.0/0 md5
</code></pre>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Vagrant share ssh agent between host and guests]]></title>
            <link href="/blog/2017/07/10/vagrant-share-ssh-agent"/>
            <updated>2017-07-10T00:00:00+00:00</updated>
            <id>/blog/2017/07/10/vagrant-share-ssh-agent</id>
            <content type="html"><![CDATA[<h2 id="why%3F">Why?</h2>

<p>In this way you can share from your host multiple ssh keys without copy/paste its on each VM. All ssh key are centralised and that's better when working with a lot of VM.</p>

<h2 id="how-to%3F">How to?</h2>

<h3 id="on-the-host-side">On the host side</h3>

<p>In <code>~/.ssh/config</code>:</p>

<pre><code>#share ssh agentwith VM
Host *
 ForwardAgent yes 
</code></pre>

<h3 id="on-the-guest-side">On the guest side</h3>

<p>In <code>Vagrantfile</code>:</p>

<pre><code>config.ssh.forward_agent = true
</code></pre>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Cool open source software for home]]></title>
            <link href="/blog/2017/07/07/open-source-list"/>
            <updated>2017-07-07T00:00:00+00:00</updated>
            <id>/blog/2017/07/07/open-source-list</id>
            <content type="html"><![CDATA[<p>I spent many years to find a full and cool stack of open source software for home. Here is my personal open source software list, that I really enjoy.</p>

<h2 id="os">OS</h2>

<p>After testing several linux (fedora, opensuse, debian, ubuntu ...), I think the easiest for home are debian based OS:</p>

<ul>
<li><a href="https://www.debian.org/index.fr.html">linux debian</a>: robust</li>
<li><a href="https://www.linuxmint.com/">linux mint</a>: like ubuntu without the commercial taste</li>
</ul>

<h2 id="system">System</h2>

<ul>
<li><a href="http://gparted.org/">gparted</a>: partition made easy</li>
<li><a href="http://clonezilla.org/">clonezilla</a>: restore your OS</li>
</ul>

<h2 id="privacy">Privacy</h2>

<ul>
<li><a href="https://www.veracrypt.fr/en/Home.html">veracrypt</a>: awesome. No more USB key or sensitive data without that </li>
<li><a href="http://keepass.info/">keepass</a>: cannot live without that</li>
</ul>

<h2 id="web-browser">Web browser</h2>

<ul>
<li><a href="https://www.mozilla.org/fr/firefox">firefox</a>: a must have</li>
<li><a href="https://www.chromium.org/Home">chromium</a>: powerfull</li>
</ul>

<h2 id="filesharing">Filesharing</h2>

<ul>
<li><a href="https://nextcloud.com/">nextcloud</a>: bye bye dropbox</li>
<li>rsync: backup your data at a friend house</li>
<li>ssh: connect to a friend house</li>
</ul>

<h2 id="gps">GPS</h2>

<ul>
<li><a href="https://sourceforge.net/projects/viking/?SetFreedomCookie">viking</a>: awesome for GPS tracking</li>
</ul>

<h2 id="office">Office</h2>

<ul>
<li><a href="https://fr.libreoffice.org/">libreoffice</a>: for documents, spreadsheets</li>
<li><a href="https://www.mozilla.org/fr/thunderbird/">thunderbird</a>: for mailing and RSS</li>
</ul>

<h2 id="text-editor">Text editor</h2>

<ul>
<li><a href="http://www.vim.org/download.php">vim</a>: you must know that stuff</li>
<li><a href="https://atom.io/">atom</a>: bye bye sublime text</li>
</ul>

<h2 id="image-editor">Image editor</h2>

<ul>
<li><a href="https://pinta-project.com/pintaproject/pinta/">pinta</a>: for simple editing</li>
<li><a href="https://www.gimp.org/fr/">gimp</a>: for complex editing</li>
</ul>

<h2 id="multimedia">Multimedia</h2>

<ul>
<li><a href="https://www.videolan.org/vlc/index.fr.html">vlc</a>: this stuff reads and streams everything</li>
</ul>

<h2 id="website">Website</h2>

<ul>
<li><a href="https://fr.wordpress.com/">wordpress</a>: cool for associations website</li>
<li><a href="https://sculpin.io/">sculpin</a>: cool for static content.</li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Installing Nextcloud on RPI device]]></title>
            <link href="/blog/2017/07/04/rpi-nexcloud"/>
            <updated>2017-07-04T00:00:00+00:00</updated>
            <id>/blog/2017/07/04/rpi-nexcloud</id>
            <content type="html"><![CDATA[<h2 id="install-raspbian">Install Raspbian</h2>

<h3 id="install-os">Install OS</h3>

<ul>
<li><a href="https://www.raspberrypi.org/downloads/raspbian/">download Raspbian</a></li>
<li><a href="/blog/2017/06/12/create-a-debian-iso-live-usb-drive">burn it to the RPI SD card</a></li>
</ul>

<h3 id="basic-configuration">Basic configuration</h3>

<ul>
<li>enable SSH: <code>sudo raspi-config</code> > <code>Interfacing Options</code> > <code>SSH</code></li>
<li>change default password running : <code>passwd</code></li>
<li>change keyboard layout if needed</li>
</ul>

<h2 id="install-nextcloud">Install Nextcloud</h2>

<h3 id="nextcloud-stack">Nextcloud Stack</h3>

<p>The following script will install the full stack. Run it as follow:</p>

<pre><code>    chmod +x nextcloud.sh
    ./nextcloud.sh
</code></pre>

<p>Provisioning script from github:</p>

<script src="https://gist.github.com/benIT/1545b4ccf883d41be9b0cdd97e043c2f.js"></script>

<h3 id="tuning">Tuning</h3>

<p>Check settings here <code>https://nextcloud.local/index.php/settings/admin/</code>:</p>

<h4 id="enable-php7.0-opcache">Enable PHP7.0 opcache</h4>

<p>Add this in <code>/etc/php/7.0/apache2/php.ini</code>:</p>

<pre><code>    opcache.enable=1
    opcache.enable_cli=1
    opcache.interned_strings_buffer=8
    opcache.max_accelerated_files=10000
    opcache.memory_consumption=128
    opcache.save_comments=1
    opcache.revalidate_freq=1
</code></pre>

<h4 id="php7.0-apcu">PHP7.0 apcu</h4>

<pre><code>    sudo apt-get install php7.0-apcu -y
</code></pre>

<p>Check this file exists:</p>

<pre><code>    cat  /etc/php/7.0/mods-available/apcu.ini
</code></pre>

<p>Finally, add this in <code>nextcloud/config/config.php</code>:</p>

<pre><code>    'memcache.local' =&gt; '\OC\Memcache\APCu',
</code></pre>

<h2 id="usb-drive">USB drive</h2>

<p>In this case, I have an usb external hard drive. I need to <a href="https://kwilson.io/blog/force-your-raspberry-pi-to-mount-an-external-usb-drive-every-time-it-starts-up/">fix it mount point</a> to be always the location in order to configure it in Nextcloud.</p>

<p>Edit  <code>/etc/fstab</code>:</p>

<pre><code>/DEV/SDA1       /MEDIA/WESTERN-DIGITAL-1-TO     EXT4    DEFAULTS        0       0
sudo chown -R root:www-data /media/western-digital-1-to/
chmod g+rwx /media/western-digital-1-to/
</code></pre>

<h2 id="nextcloud-trusted-domains">Nextcloud trusted domains</h2>

<p>Edit <code>trusted_domains</code> settings in <code>/var/www/nextcloud/config</code> if needed.</p>

<h2 id="enjoy">Enjoy</h2>

<p>That was it! Nextcloud if now fully configured on your RPI, enjoy!</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[First steps with Veracrypt]]></title>
            <link href="/blog/2017/06/19/veracrypt-first-steps"/>
            <updated>2017-06-19T00:00:00+00:00</updated>
            <id>/blog/2017/06/19/veracrypt-first-steps</id>
            <content type="html"><![CDATA[<h2 id="why-vercrypt%3F">Why Vercrypt?</h2>

<p>It's :</p>

<ul>
<li><a href="https://www.nextinpact.com/news/91703-veracrypt-comment-chiffrer-et-cacher-fichiers-disque-dur-externe-ou-clef-usb.htm">secure</a> (based on truecrypt audit and security fix)</li>
<li><a href="https://github.com/veracrypt/VeraCrypt">open source</a></li>
<li><a href="https://www.nextinpact.com/news/91703-veracrypt-comment-chiffrer-et-cacher-fichiers-disque-dur-externe-ou-clef-usb.htm">french</a></li>
</ul>

<h2 id="download">Download</h2>

<ul>
<li><a href="https://veracrypt.codeplex.com/wikipage?title=Downloads#Title">download from official site</a></li>
</ul>

<h2 id="create-a-container-based-on-keyfile-authentication">Create a container based on keyfile authentication</h2>

<p>In this example, my container is called <code>animals</code> and has been created from Veracrypt GUI. 
This container has no password, it based on key system. The key has been generated from Veracrypt GUI.</p>

<ul>
<li>The container is called <code>animals</code></li>
<li>The key is called <code>animals-key</code></li>
</ul>

<h2 id="add-files-to-container">Add files to container</h2>

<pre><code>    cd veracrypt
    veracrypt animals --keyfiles=animals-key --password=''
    tar -cvzf animals.tgz /home/ben/Images/animals-wallpapers
    cp animals.tgz /media/veracrypt1/
    veracrypt -d
</code></pre>

<h2 id="let%27s-backup-it-on-a-friend-rpi%21">Let's backup it on a friend RPI!</h2>

<pre><code>    rsync -avzh ben@XXX.XXX.XXX.XXX:/home/ben/veracrypt /home/ben/veracrypt        
</code></pre>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Moodle migration procedure]]></title>
            <link href="/blog/2017/06/15/moodle-migration-procedure."/>
            <updated>2017-06-15T00:00:00+00:00</updated>
            <id>/blog/2017/06/15/moodle-migration-procedure.</id>
            <content type="html"><![CDATA[<p>In this post is described how to export you moodle app and import it on another environment.</p>

<h2 id="export-from-the-source-database">Export from the source database</h2>

<pre><code>     sudo -u postgres pg_dump moodle &gt; /vagrant/shared/dump/moodle-database-exported.sql
</code></pre>

<h2 id="migrate-database">Migrate database</h2>

<p>Here I sustitute the string 'moodle-dev' by 'moodle-deploy' from 'moodle-database-exported.sql' and write it to 'database-to-import.sql':</p>

<pre><code>     sed 's/moodle-dev/moodle-deploy/g' moodle-database-exported.sql &gt; database-to-import.sql
</code></pre>

<h2 id="let%27s-tar-db-and-filesystem">Let's tar db and filesystem</h2>

<pre><code>    tar -cvzf moodle-to-import.tgz database-to-import.sql moodle moodledata/
    exit
    mv ~/vagrant/vagrant-moodle/shared/moodle-to-import.tgz ~/vagrant/vagrant-moodle-deploy/shared/
</code></pre>

<h2 id="cleanup-the-target-machine">Cleanup the target machine</h2>

<p>Connect on the target machine. here target database is also named 'moodle':</p>

<pre><code>     cd /vagrant/shared
     rm -rf moodle moodledata/
     sudo -u postgres psql -c "DROP DATABASE moodle"
     sudo -u postgres psql -c "CREATE DATABASE moodle"
</code></pre>

<h2 id="import-db-and-filesystem-on-the-target-database">Import db and filesystem on the target database</h2>

<pre><code>    sudo tar -xzf moodle-to-import.tgz
    sudo -u postgres psql --set ON_ERROR_STOP=on moodle &lt; database-to-import.sql
</code></pre>

<h2 id="migrate-the-config.php-file">Migrate the config.php file</h2>

<pre><code>    sed -i 's/moodle-dev/moodle-deploy/g' moodle/config.php
</code></pre>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Configure xdebug with phpstorm with a vagrant box]]></title>
            <link href="/blog/2017/06/15/setup-xdebug-phpstorm-vagrant"/>
            <updated>2017-06-15T00:00:00+00:00</updated>
            <id>/blog/2017/06/15/setup-xdebug-phpstorm-vagrant</id>
            <content type="html"><![CDATA[<p>After loosing a few hours reconfiguring xdebug, phpstorm and vagrant, I found this <a href="https://www.theodo.fr/blog/2016/08/configure-xdebug-phpstorm-vagrant/">great ressource</a>. Here are my notes about it:</p>

<p><em>phpstorm is installed on the hostmachine and the app is running in a vagrant box.</em></p>

<h2 id="vagrant-guest-machine-setup">Vagrant guest machine setup</h2>

<pre><code>sudo apt-get install php5-xdebug
</code></pre>

<p>Edit <code>/etc/php5/mods-available/xdebug.ini</code> :</p>

<pre><code>xdebug.remote_enable=true
xdebug.remote_connect_back=true
xdebug.idekey=MY_AWESOME_KEY
</code></pre>

<h2 id="phpstorm-setup">Phpstorm setup</h2>

<h3 id="setup-%27php-remote-debug%27-configuration">Setup 'php remote debug' configuration</h3>

<p><img src="/images/xdebug/storm-xdebug-vagrant-1-remote-debug-conf.png" alt="screenshot" /></p>

<h3 id="setup-%27server%27-configuration">Setup 'server' configuration</h3>

<p><img src="/images/xdebug/storm-xdebug-vagrant-2-server-conf.png" alt="screenshot" /></p>

<h2 id="browser-plugin">Browser plugin</h2>

<ul>
<li>install a browser <a href="https://addons.mozilla.org/en-US/firefox/addon/the-easiest-xdebug/">plugin such as this one</a></li>
<li>configure the ide key, here: <code>MY_AWESOME_KEY</code></li>
<li>it is also possible to use <a href="https://www.jetbrains.com/phpstorm/marklets/">bookmarklets</a> </li>
</ul>

<h2 id="enjoy%21">Enjoy!</h2>

<ul>
<li>Puts breakpoints </li>
<li>Enable cookie using web browser extension or bookmarklet
<img src="/images/xdebug/storm-xdebug-vagrant-3-breakpoints.png" alt="screenshot" /></li>
<li>Click on the bug icon called 'debug mode'</li>
<li>You can now enjoy the debugger (inspect variables, control the execution flow)
<img src="/images/xdebug/storm-xdebug-vagrant-4-debugger-running.png" alt="screenshot" /></li>
</ul>
]]></content>
        </entry>
    </feed>