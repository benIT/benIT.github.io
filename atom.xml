<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[benIT&#039;s notebook]]></title>
    <link href="/atom.xml" rel="self"/>
    <link href="/"/>
    <updated>2019-05-06T14:14:38+00:00</updated>
    <id>/</id>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[RIP a password protected archive with John the Ripper]]></title>
            <link href="/blog/2019/05/06/john-the-ripper-rip-archive"/>
            <updated>2019-05-06T00:00:00+00:00</updated>
            <id>/blog/2019/05/06/john-the-ripper-rip-archive</id>
            <content type="html"><![CDATA[<h2 id="install-kali">Install KALI</h2>

<p>First, <a href="https://www.kali.org/news/announcing-kali-for-vagrant/">intall a kali headless VM with vagrant</a>.</p>

<p>Grant large CPUs and RAM resources to the VM. For instance, in <code>Vagrantfile</code>:</p>

<pre><code># Create a forwarded port
config.vm.network "forwarded_port", guest: 80, host: 8080

# Create a private network. In VirtualBox, this is a Host-Only network
config.vm.network "private_network", ip: "192.168.33.101"

# VirtualBox specific settings
config.vm.provider "virtualbox" do |vb|
# Hide the VirtualBox GUI when booting the machine
vb.gui = false

# Customize the amount of memory on the VM:
vb.memory = "8192"
vb.cpus= "5"
end

# Provision the machine with a shell script
config.vm.provision "shell", inline: &lt;&lt;-SHELL
apt-get update
apt-get install -y crowbar
SHELL
end
</code></pre>

<h2 id="generate-a-test-archive">Generate a test archive</h2>

<pre><code>echo "foo bar" &gt; file.txt
zip -P pass archive.zip file.txt
</code></pre>

<p><strong>Thus, our archive is protected with the password: <code>pass</code></strong></p>

<p>Test password protection:</p>

<pre><code>unzip archive.zip 
Archive:  archive.zip
[archive.zip] file.txt password: 
</code></pre>

<h2 id="rip-archive.zip">RIP archive.zip</h2>

<h3 id="get-password-hash-with-zip2john">Get password hash with zip2john</h3>

<pre><code>zip2john archive.zip &gt; hash.txt
</code></pre>

<p>Prints :</p>

<pre><code>ver 1.0 efh 5455 efh 7875 archive.zip/file.txt PKZIP Encr: 2b chk, TS_chk, cmplen=20, decmplen=8, crc=13DDB427
</code></pre>

<h3 id="rip-hash">RIP hash</h3>

<pre><code>john hash.txt
</code></pre>

<p>Prints:</p>

<pre><code>Using default input encoding: UTF-8
Loaded 1 password hash (PKZIP [32/64])
Will run 2 OpenMP threads
Proceeding with single, rules:Wordlist
Press 'q' or Ctrl-C to abort, almost any other key for status
Warning: Only 4 candidates buffered for the current salt, minimum 8
needed for performance.
Warning: Only 5 candidates buffered for the current salt, minimum 8
needed for performance.
Warning: Only 6 candidates buffered for the current salt, minimum 8
needed for performance.
Warning: Only 4 candidates buffered for the current salt, minimum 8
needed for performance.
Almost done: Processing the remaining buffered candidate passwords, if any
Proceeding with wordlist:/usr/share/john/password.lst, rules:Wordlist
pass             (archive.zip/file.txt)
1g 0:00:00:00 DONE 2/3 (2019-05-06 09:53) 50.00g/s 2109Kp/s 2109Kc/s 2109KC/s 123456..Peter
Use the "--show" option to display all of the cracked passwords reliably
Session completed
</code></pre>

<h3 id="and-archive-password-is...">And archive password is...</h3>

<pre><code>pass             (archive.zip/file.txt)
</code></pre>

<h3 id="tips">Tips</h3>

<p>If you run <code>john</code> again, you will get:</p>

<pre><code>john hash.txt
Using default input encoding: UTF-8
Loaded 1 password hash (PKZIP [32/64])
No password hashes left to crack (see FAQ)
</code></pre>

<p>This means that the password has already been ripped, to print password check <code>.john/john.pot</code> file or use <code>--show</code> option:</p>

<pre><code>john hash.txt --show
archive.zip/file.txt:pass:file.txt:archive.zip::archive.zip

1 password hash cracked, 0 left
</code></pre>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Install REDMINE 3.4 with PgSQL and Apache2 on debian 9]]></title>
            <link href="/blog/2019/04/08/install-redmine"/>
            <updated>2019-04-08T00:00:00+00:00</updated>
            <id>/blog/2019/04/08/install-redmine</id>
            <content type="html"><![CDATA[<h2 id="resources">Resources</h2>

<ul>
<li>http://www.redmine.org/projects/redmine/wiki/howto_install_redmine_on_ubuntu_step_by_step</li>
<li>http://www.redmine.org/projects/redmine/wiki/redmineinstall</li>
</ul>

<h2 id="tested-version">Tested version</h2>

<pre><code>pg_config --version
PostgreSQL 11.2 (Debian 11.2-1.pgdg90+1)

ruby -v
ruby 2.3.3p222 (2016-11-21) [x86_64-linux-gnu]
</code></pre>

<h2 id="server-packages">Server packages</h2>

<h3 id="debian-packages">Debian packages</h3>

<pre><code>sudo apt-get install apache2 libapache2-mod-passenger ruby ruby-dev
sudo apt install postgresql-server-dev-all
</code></pre>

<h3 id="ruby-gems">Ruby GEMs</h3>

<pre><code>sudo -E gem install bundler -v 1.17.3
</code></pre>

<h2 id="database">Database</h2>

<pre><code>CREATE ROLE redmine LOGIN ENCRYPTED PASSWORD 'redmine' NOINHERIT VALID UNTIL 'infinity';
CREATE DATABASE redmine WITH ENCODING='UTF8' OWNER=redmine;
</code></pre>

<h2 id="app">App</h2>

<pre><code>tar -xzf redmine-3.4.10.tar.gz
cd redmine-3.4.10/
mv config/database.yml.example  config/database.yml
cd ..
mv redmine-3.4.10/ /var/www/redmine
</code></pre>

<p>Edit <code>config/database.yml.example</code> :</p>

<pre><code># PostgreSQL configuration example
production:
  adapter: postgresql
  database: redmine
  host: localhost
  username: redmine
  password: "redmine"
</code></pre>

<p>And rename it:</p>

<pre><code>mv config/database.yml.example  config/database.yml
</code></pre>

<h3 id="dependencies">Dependencies</h3>

<pre><code>bundle install --without development test
</code></pre>

<h3 id="setup">Setup</h3>

<pre><code>bundle exec rake generate_secret_token
RAILS_ENV=production bundle exec rake db:migrate
RAILS_ENV=production REDMINE_LANG=fr bundle exec rake redmine:load_default_data


mkdir -p tmp tmp/pdf public/plugin_assets
sudo chown -R www-data: files log tmp public/plugin_assets
sudo chmod -R 755 files log tmp public/plugin_assets
</code></pre>

<h2 id="apache2">Apache2</h2>

<h3 id="permissions-%26-ownership">Permissions &amp; ownership</h3>

<pre><code>sudo chown -R www-data: /var/www/
sudo chmod -R 755 /var/www/
</code></pre>

<h3 id="%C2%A0configuration-of-passenger.conf">Â Configuration of passenger.conf</h3>

<p>Add the following line to <code>/etc/apache2/mods-available/passenger.conf</code>:</p>

<pre><code>PassengerDefaultUser www-data
</code></pre>

<h3 id="virtual-host">Virtual Host</h3>

<p>Edit <code>/etc/apache2/sites-enabled/000-default.conf</code>:</p>

<pre><code>&lt;VirtualHost *:80&gt;
    #ServerName www.example.com
    ServerAdmin webmaster@localhost
    DocumentRoot /var/www/redmine/public/
        #MaxRequestLen 20971520

        &lt;Directory "/var/www/redmine/public"&gt;
                Options Indexes ExecCGI FollowSymLinks
                Order allow,deny
                Allow from all
                AllowOverride all
        &lt;/Directory&gt;

    ErrorLog ${APACHE_LOG_DIR}/redmine.error.log
    CustomLog ${APACHE_LOG_DIR}/redmine.access.log combined
&lt;/VirtualHost&gt;
</code></pre>

<h2 id="test">Test</h2>

<p>REDMINE should be running, login with <code>admin</code>/<code>admin</code>.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[GIT rebase]]></title>
            <link href="/blog/2019/03/25/git-rebase"/>
            <updated>2019-03-25T00:00:00+00:00</updated>
            <id>/blog/2019/03/25/git-rebase</id>
            <content type="html"><![CDATA[<p>The aim of this post is to understand and get confortable with the git rebase command.</p>

<p><a href="https://www.atlassian.com/git/tutorials/rewriting-history/git-rebase">Definition</a>:</p>

<blockquote>
  <p>Rebasing is the process of moving or combining a sequence of commits to a new base commit. Rebasing is most useful and easily visualized in the context of a feature branching workflow.</p>
</blockquote>

<h2 id="create-a-git-repo">Create a git repo</h2>

<pre><code>mkdir rebase-test &amp;&amp; cd rebase-test
git init
</code></pre>

<p>output:</p>

<pre><code>Initialized empty Git repository in /home/bmn/rebase-test/.git/
</code></pre>

<h2 id="create-one-commit-on-%60master%60-branch">Create one commit on <code>master</code> branch</h2>

<pre><code>echo "first content from master" &gt;&gt; README.md
git add README.md 
git commit -m "first commit"
</code></pre>

<p>output:</p>

<pre><code>[master (root-commit) dc5f8d2] first commit
1 file changed, 1 insertion(+)
create mode 100644 README.md
</code></pre>

<h2 id="create-a-%60feature%60-branch-from-that-commit">Create a <code>feature</code> branch from that commit</h2>

<pre><code>git checkout -b feature
Switched to a new branch 'feature'
</code></pre>

<h2 id="create-one-commit-on-the-%60feature%60-branch">Create one commit on the <code>feature</code> branch</h2>

<pre><code>echo "introducing a new feature" &gt;&gt; README.md
</code></pre>

<p>Check file:</p>

<pre><code>cat README.md
</code></pre>

<p>output:</p>

<pre><code>first content from master
introducing a new feature


git commit -am "add feature line"
</code></pre>

<p>output:</p>

<pre><code>[feature 2212653] add feature line
1 file changed, 1 insertion(+)
</code></pre>

<h2 id="check-repo-graph">Check repo graph</h2>

<pre><code>nohup gitg &amp;
</code></pre>

<p><img src="/images/git-rebase/graph1.png" alt="screenshot" /></p>

<h2 id="create-a-new-commit-on-master-branch">Create a new commit on master branch</h2>

<pre><code>git checkout master 
Switched to branch 'master'
</code></pre>

<p>Check file:</p>

<pre><code>cat README.md 
first content from master

vim README.md # add a title line for example
cat README.md
</code></pre>

<p>output:</p>

<pre><code># Master title
first content from master
</code></pre>

<p>Commit that:</p>

<pre><code>git commit -am "add master title"
</code></pre>

<p>output:</p>

<pre><code>[master ec82793] add master title
 1 file changed, 1 insertion(+)
</code></pre>

<blockquote>
  <p>Let's say that <code>master</code> branch has a new commit because work on master has been delivered. Let's rebase the <code>feature</code> branch to this new commit, to get the new content from <code>master</code> and play the commit from <code>feature</code> branch.</p>
</blockquote>

<h2 id="let%27s-rebase-the-%60feature%60-branch-on-the-%60master%60-branch">Let's rebase the <code>feature</code> branch on the <code>master</code> branch</h2>

<p>Let's move on our <code>feature</code> branch:</p>

<pre><code>git checkout feature 
</code></pre>

<p>output:</p>

<pre><code>Switched to branch 'feature'
</code></pre>

<p>And now the rebase operation itself:</p>

<pre><code>git rebase -i master 
</code></pre>

<p><img src="/images/git-rebase/rebase.png" alt="screenshot" /></p>

<p>output:</p>

<pre><code>Successfully rebased and updated refs/heads/feature.
</code></pre>

<p><em>Our <code>feature</code> branch starts now from <code>master</code> head commit and now git is replaying all the commit from our <code>feature</code> branch from this point.</em></p>

<p>The result is the following:</p>

<p>The file <code>README.ms</code> now contains the commits from <code>master</code> + the commit from <code>feature</code>.</p>

<h2 id="let%27s-check-feature-branch-content">Let's check feature branch content</h2>

<pre><code>cat README.md 
</code></pre>

<p>output:</p>

<pre><code># Master title
first content from master
introducing a new feature
</code></pre>

<h2 id="let%27s-check-%60master%60-branch-content">Let's check <code>master</code> branch content</h2>

<pre><code>git checkout master 
</code></pre>

<p>output:</p>

<pre><code>Switched to branch 'master'


cat README.md
</code></pre>

<p>output:</p>

<pre><code># Master title
first content from master
</code></pre>

<h2 id="check-repo-graph">Check repo graph</h2>

<pre><code>nohup gitg &amp;
</code></pre>

<p><img src="/images/git-rebase/graph2.png" alt="screenshot" /></p>

<h2 id="usage%3A-getting-changes-from-origin%2Fbranch-on-branch">Usage: getting changes from origin/branch on branch</h2>

<p>Retrieve changes from origin:</p>

<pre><code>git fetch
</code></pre>

<p>apply commit from that:</p>

<pre><code>git checkout master
git rebase origin/master
</code></pre>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[PHPSTORM search &amp; replace with regexp]]></title>
            <link href="/blog/2019/02/22/phpstorm-search-and-replace-regexp"/>
            <updated>2019-02-22T00:00:00+00:00</updated>
            <id>/blog/2019/02/22/phpstorm-search-and-replace-regexp</id>
            <content type="html"><![CDATA[<h2 id="context">Context</h2>

<p>I have a list of 10K of #ID,and need to add a <code>,</code> at the end of each line to process them in a SQL query.</p>

<h2 id="data-input">data input</h2>

<pre><code>1
2
3
4
5
6
7
8
9
10
...
</code></pre>

<h2 id="the-trick">the trick</h2>

<p>Hit <code>ctrl+R</code> to launch the <code>search &amp; replace action</code>.</p>

<p>Search the following pattern:</p>

<pre><code>(.*)$
</code></pre>

<p>And replace it with:</p>

<pre><code>$1,
</code></pre>

<p><img src="/images/phpstorm/search-replace-regexp.png" alt="screenshot" /></p>

<h2 id="data-output">data output</h2>

<pre><code>1,
2,
3,
4,
5,
6,
7,
8,
9,
10,
...,
</code></pre>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Openstack: resize volume and partition size on a running instance]]></title>
            <link href="/blog/2019/02/20/openstack-resize-volume"/>
            <updated>2019-02-20T00:00:00+00:00</updated>
            <id>/blog/2019/02/20/openstack-resize-volume</id>
            <content type="html"><![CDATA[<h2 id="context">Context</h2>

<p>This post deals with how to increase a volume attached to a server instance on openstack. <a href="https://docs.openstack.org/cinder/rocky/cli/cli-manage-volumes.html#">See openstack volume ressource</a>.</p>

<h2 id="test-database">Test database</h2>

<p>To test everything goes well, a test database is setup:</p>

<pre><code>sudo -u postgres
sudo -u postgres psql -c "create database webapp";
sudo -u postgres psql -d webapp -c "CREATE TABLE account(user_id serial PRIMARY KEY,username VARCHAR (50) UNIQUE NOT NULL,created_on TIMESTAMP NOT NULL);" ;
sudo -u postgres psql -d webapp -c "INSERT INTO account (username,created_on ) VALUES ('foo','2019-01-01') ;" ;
sudo -u postgres psql -d webapp -c "INSERT INTO account (username,created_on ) VALUES ('bar','2019-01-02') ;" ;
</code></pre>

<p>Check command:</p>

<pre><code>sudo -u postgres psql -d webapp -c "SELECT * FROM account" ;
</code></pre>

<p>returns:</p>

<pre><code> user_id | username |     created_on      
---------+----------+---------------------
       1 | foo      | 2019-01-01 00:00:00
       2 | bar      | 2019-01-02 00:00:00
(2 rows)
</code></pre>

<h2 id="switch-off-automatic-volume-mount-in-%60%2Fetc%2Ffstab-%60">Switch off automatic volume mount in <code>/etc/fstab</code></h2>

<pre><code>ssh demo
</code></pre>

<p>Comment lines in <code>/etc/fstab</code> that concern the volume you want to increase:</p>

<pre><code>sudo vim /etc/fstab 

#/dev/vdb1 /data ext4 defaults 0 0
#/data/pgsql /var/lib/postgresql none bind 0 0

sudo reboot
</code></pre>

<h2 id="check">Check</h2>

<pre><code>ssh demo
</code></pre>

<p>Check that they are no more mount point that depend on the volume we are going to manipulate.</p>

<pre><code>df -h
Filesystem      Size  Used Avail Use% Mounted on
udev            992M     0  992M   0% /dev
tmpfs           201M  4,5M  197M   3% /run
/dev/vda1       4,9G  1,9G  2,9G  40% /
tmpfs          1003M  8,0K 1003M   1% /dev/shm
tmpfs           5,0M     0  5,0M   0% /run/lock
tmpfs          1003M     0 1003M   0% /sys/fs/cgroup
</code></pre>

<h2 id="stop-your-applications-if-needed">Stop your applications if needed</h2>

<pre><code>sudo service apache2 stop
sudo service postgresql stop
</code></pre>

<h2 id="increase-our-volume-size">Increase our volume size</h2>

<p>identify your target server and target volume with <code>openstack volume list</code> and <code>openstack server list</code></p>

<pre><code>TARGET_SERVER=ed864066-ed73-46e0-b551-5bfca9873af6
TARGET_VOLUME=1be3646a-3bb5-40fc-b9eb-6ab803b60d2c
VOLUME_SIZE=25
</code></pre>

<h2 id="detach-volume-from-server">Detach volume from server</h2>

<pre><code>openstack server remove volume $TARGET_SERVER $TARGET_VOLUME
</code></pre>

<p><em>At this point, the device should NOT be visible when you execute: <code>ls -l /dev/vd*</code></em>.</p>

<h2 id="increase-volume-size">Increase volume size</h2>

<pre><code>openstack volume set $TARGET_VOLUME --size $VOLUME_SIZE
</code></pre>

<h2 id="attach-volume-to-server">Attach volume to server</h2>

<pre><code>openstack server add volume $TARGET_SERVER $TARGET_VOLUME --device /dev/vdb
</code></pre>

<p><em>At this point, the device should BE visible when you execute: <code>ls -l /dev/vd*</code></em>.</p>

<h2 id="manage-partition-on-your-openstack-server">Manage partition on your openstack server</h2>

<p>Let's configure the partition to use all the volume space.</p>

<pre><code>ssh demo
sudo parted /dev/vdb resizepart 1 100%
sudo e2fsck -f /dev/vdb1
sudo resize2fs /dev/vdb1
</code></pre>

<h2 id="restore-%60%2Fetc%2Ffstab%60">Restore <code>/etc/fstab</code></h2>

<p>uncomment the lines:</p>

<pre><code>/dev/vdb1 /data ext4 defaults 0 0
/data/pgsql /var/lib/postgresql none bind 0 0
</code></pre>

<p>reboot: <code>sudo reboot</code></p>

<h2 id="check-your-fs">Check your fs</h2>

<h3 id="check-volume-size-and-partition-size">Check volume size and partition size</h3>

<pre><code>sudo fdisk -l

Disk /dev/vdb: 25 GiB, 26843545600 bytes, 52428800 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disklabel type: dos
Disk identifier: 0x0e1b27a4

Device     Boot Start      End  Sectors Size Id Type
/dev/vdb1        2048 52428799 52426752  25G 83 Linux
</code></pre>

<h3 id="check-database">Check database</h3>

<p>Use our test command to check our database:</p>

<pre><code>ssh demo
sudo -u postgres psql -d webapp -c "SELECT * FROM account" ;
</code></pre>

<p>check data are ok:</p>

<pre><code> user_id | username |     created_on      
---------+----------+---------------------
       1 | foo      | 2019-01-01 00:00:00
       2 | bar      | 2019-01-02 00:00:00
(2 rows)
</code></pre>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[SSH X11 &amp; docker]]></title>
            <link href="/blog/2019/02/15/ssh-x11-docker"/>
            <updated>2019-02-15T00:00:00+00:00</updated>
            <id>/blog/2019/02/15/ssh-x11-docker</id>
            <content type="html"><![CDATA[<h2 id="purpose">Purpose</h2>

<p>Run GUI application inside a docker container using X11Forwarding.</p>

<p><a href="https://gist.github.com/udkyo/c20935c7577c71d634f0090ef6fa8393">source from github.</a></p>

<h2 id="create-a-container">Create a container</h2>

<h3 id="dockerfile">DockerFile</h3>

<pre><code>FROM ubuntu
RUN apt update \
    &amp;&amp; apt install -y firefox \
                      openssh-server \
                      xauth \
                      emacs \
    &amp;&amp; mkdir /var/run/sshd \
    &amp;&amp; mkdir /root/.ssh \
    &amp;&amp; chmod 700 /root/.ssh \
    &amp;&amp; ssh-keygen -A \
    &amp;&amp; sed -i "s/^.*PasswordAuthentication.*$/PasswordAuthentication no/" /etc/ssh/sshd_config \
    &amp;&amp; sed -i "s/^.*X11Forwarding.*$/X11Forwarding yes/" /etc/ssh/sshd_config \
    &amp;&amp; sed -i "s/^.*X11UseLocalhost.*$/X11UseLocalhost no/" /etc/ssh/sshd_config \
    &amp;&amp; grep "^X11UseLocalhost" /etc/ssh/sshd_config || echo "X11UseLocalhost no" &gt;&gt; /etc/ssh/sshd_config

RUN echo "CONTENT_OF_ID_RSA_PUB_KEY_HERE" &gt;&gt; /root/.ssh/authorized_keys
</code></pre>

<h3 id="build-it">Build it</h3>

<pre><code>docker build -t benit/ubuntu-x11 . --build-arg http_proxy=$http_proxy
</code></pre>

<h2 id="run-container">Run Container</h2>

<pre><code>docker run --name ubuntu-x11 --rm -d -p 2150:22 benit/ubuntu-x11
</code></pre>

<h2 id="ssh-client-configuration">SSH client configuration</h2>

<p>Edit <code>~/.ssh/config</code> on the client, here my workstation is named <code>lxdev</code>:</p>

<pre><code>Host ubuntuX11
     Hostname lxdev
     Port 2150
     user root
     ForwardX11 yes
     ForwardX11Trusted yes
</code></pre>

<h2 id="use-it%21">Use it!</h2>

<pre><code>ssh -X ubuntu-x11 emacs     
</code></pre>

<h2 id="enjoy%21">Enjoy!</h2>

<p><img src="/images/docker/docker-ssh-x11-emacs.png" alt="screenshot" /></p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Linux multiusb live]]></title>
            <link href="/blog/2019/02/15/linux-multiusb-live"/>
            <updated>2019-02-15T00:00:00+00:00</updated>
            <id>/blog/2019/02/15/linux-multiusb-live</id>
            <content type="html"><![CDATA[<h2 id="purpose">Purpose</h2>

<p>This post deals with creating a multi linux iso live usb drive. <a href="https://itsfoss.com/multiple-linux-one-usb/">source</a></p>

<h2 id="procedure">Procedure</h2>

<ul>
<li>format your drive to fat32</li>
<li><a href="https://github.com/mbusb/multibootusb/releases/download/v8.8.0/python3-multibootusb_8.8.0-1_all.deb">download MultiBootUsb</a></li>
<li>install it : <code>dpkg -i python3-multibootusb_8.8.0-1_all.deb</code></li>
<li>check if all python dependencies are satisfied, if not try install missing with <code>sudo apt install python3-pyqt5 p7zip-full python3-pyudev</code></li>
<li>enjoy : you can now burn several iso using the GUI. Great tool!</li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Linux logs]]></title>
            <link href="/blog/2019/02/11/linux-mastering-logs"/>
            <updated>2019-02-11T00:00:00+00:00</updated>
            <id>/blog/2019/02/11/linux-mastering-logs</id>
            <content type="html"><![CDATA[<h2 id="purpose">Purpose</h2>

<p>The aim of is post is to manipulate linux system logs.</p>

<p>Logging is an important part of IT system and must be understand.</p>

<h2 id="test-program">Test program</h2>

<p>The following program named <code>program.sh</code> is used to test log services:</p>

<pre><code>echo I am $(whoami) and up from  $(uptime)
</code></pre>

<h2 id="logs">Logs</h2>

<p>Logs are managed with a service named <code>rsyslog</code></p>

<pre><code>sudo service rsyslog status
</code></pre>

<h2 id="activate-cron-log">Activate cron log</h2>

<p>In <code>sudo vim /etc/rsyslog.conf</code>, uncomment this line:</p>

<pre><code>cron.*                          /var/log/cron.log
</code></pre>

<p>Restart <code>systemctl</code>:</p>

<pre><code>sudo systemctl restart rsyslog
</code></pre>

<p>This doesn't log your program output, but logs your cron information.</p>

<p>Considering the following crontab that runs every minute:</p>

<pre><code>* * * * * /home/debian/prog.sh
</code></pre>

<p>Let's check <code>cron.log</code> details:</p>

<pre><code>sudo tail -f /var/log/cron.log

Feb 11 10:09:01 sandbox CRON[25182]: (root) CMD (  [ -x /usr/lib/php/sessionclean ] &amp;&amp; if [ ! -d /run/systemd/system ]; then /usr/lib/php/sessionclean; fi)
Feb 11 10:09:01 sandbox CRON[25183]: (debian) CMD (/home/debian/prog.sh)
Feb 11 10:10:01 sandbox CRON[25243]: (debian) CMD (/home/debian/prog.sh)
Feb 11 10:11:01 sandbox CRON[25373]: (debian) CMD (/home/debian/prog.sh)
Feb 11 10:12:01 sandbox CRON[25396]: (debian) CMD (/home/debian/prog.sh)
Feb 11 10:13:01 sandbox CRON[25405]: (debian) CMD (/home/debian/prog.sh)
Feb 11 10:14:01 sandbox CRON[25415]: (debian) CMD (/home/debian/prog.sh)
Feb 11 10:15:01 sandbox CRON[25439]: (root) CMD (command -v debian-sa1 &gt; /dev/null &amp;&amp; debian-sa1 1 1)
Feb 11 10:15:01 sandbox CRON[25441]: (debian) CMD (/home/debian/prog.sh)
Feb 11 10:16:02 sandbox CRON[25459]: (debian) CMD (/home/debian/prog.sh)
</code></pre>

<h2 id="log-rotation">Log rotation</h2>

<p>Log rotation is managed with a service named <code>logrotate</code></p>

<pre><code>cat /var/lib/logrotate/status | grep apache

"/var/log/apache2/access.log" 2019-2-8-6:25:2
"/var/log/apache2/other_vhosts_access.log" 2018-5-29-6:0:0
"/var/log/apache2/error.log" 2019-2-11-6:25:1
</code></pre>

<p>Let's check apache2 webserver log rotation configuration :</p>

<pre><code>cat /etc/logrotate.d/apache2 
/var/log/apache2/*.log {
    daily
    missingok
    rotate 14
    compress
    delaycompress
    notifempty
    create 640 root adm
    sharedscripts
    postrotate
            if /etc/init.d/apache2 status &gt; /dev/null ; then \
                /etc/init.d/apache2 reload &gt; /dev/null; \
            fi;
    endscript
    prerotate
        if [ -d /etc/logrotate.d/httpd-prerotate ]; then \
            run-parts /etc/logrotate.d/httpd-prerotate; \
        fi; \
    endscript
}
</code></pre>

<h2 id="example-with-%60program.sh%60">Example with <code>program.sh</code></h2>

<h3 id="program-log-location">Program log location</h3>

<p>We will tell our program to write here: <code>/var/log/prog.sh/log</code>. Let's create this file with the right permissions:</p>

<pre><code>sudo mkdir /var/log/prog.sh/
sudo touch /var/log/prog.sh/log
sudo chmod ugo+rw /var/log/prog.sh/log
</code></pre>

<h3 id="program-crontab">Program crontab</h3>

<pre><code>* * * * * /home/debian/prog.sh &gt;&gt; /var/log/prog.sh/log
</code></pre>

<h3 id="program-log-rotation">Program log rotation</h3>

<p>Edit <code>/etc/logrotate.d/program.sh</code> :</p>

<pre><code>/var/log/program.sh/*.log {
        daily
        missingok
        rotate 5
        compress
        delaycompress
        notifempty
        create 644 root root
}
</code></pre>

<p><a href="https://doc.ubuntu-fr.org/logrotate#exemple">Great doc here</a>.</p>

<h3 id="check-log-rotation">Check log rotation</h3>

<pre><code>ls /var/log/prog.sh/
</code></pre>

<h2 id="another-example-with-a-cronjob-from-a-webapp-named-%60moodle%60">Another example with a cronjob from a webapp named <code>moodle</code></h2>

<h3 id="moodle-log-location">Moodle log location</h3>

<pre><code>sudo mkdir /var/log/moodle
sudo touch /var/log/moodle/cron.log
sudo chmod -R ug+rw /var/log/moodle/
</code></pre>

<h3 id="moodle-crontab">Moodle crontab</h3>

<p>This job must be run from <code>www-data</code> user, so we need the crontab too to be run from <code>www-data</code> user:</p>

<pre><code>sudo crontab -u www-data -e
</code></pre>

<p>edit as follow:</p>

<pre><code>#run moodle cron every hour
0 * * * * php /data/moodle/admin/cli/cron.php &gt;&gt; /var/log/moodle/cron.log 2&gt;&amp;1
</code></pre>

<p><strong>Important stderr has been redirected to stdout with <code>2&amp;1</code></strong> and all that is printed in a file.</p>

<h3 id="moodle-log-rotation">Moodle log rotation</h3>

<p>Edit <code>/etc/logrotate.d/moodle</code> :</p>

<pre><code>/var/log/moodle/*.log {
        daily
        missingok
        rotate 5
        compress
        delaycompress
        notifempty
        create 640 www-data www-data
}    
</code></pre>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[How to make a christmas garland with a nginx reverse proxy and 3 apache backends under docker?]]></title>
            <link href="/blog/2019/01/25/docker-make-a-christmas-garland-with-nginx-apache"/>
            <updated>2019-01-25T00:00:00+00:00</updated>
            <id>/blog/2019/01/25/docker-make-a-christmas-garland-with-nginx-apache</id>
            <content type="html"><![CDATA[<h1 id="purpose">Purpose</h1>

<p>This posts deals with doing yourself a christmas garland!</p>

<p>We will be using :</p>

<ul>
<li>nginx as a reverse proxy</li>
<li>apache as a backend</li>
<li>docker as a plateforme  </li>
</ul>

<h1 id="repository">Repository</h1>

<p><a href="https://github.com/benIT/docker-nginx-reverse-proxy">You will find a demonstration repository here.</a></p>

<h1 id="demo">Demo</h1>

<p><a href="/video/docker-christmas-garland-demo.mp4">A video is available here.</a></p>

<p>If it does not work, download it from github repo:</p>

<pre><code>wget https://raw.githubusercontent.com/benIT/docker-nginx-reverse-proxy/master/demo.mp4
vlc demo.mp4
</code></pre>

<h1 id="conclusion">Conclusion</h1>

<p>Never forget that computing should always be fun!</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Docker 101: docker-compose]]></title>
            <link href="/blog/2019/01/15/docker-docker-compose"/>
            <updated>2019-01-15T00:00:00+00:00</updated>
            <id>/blog/2019/01/15/docker-docker-compose</id>
            <content type="html"><![CDATA[<h1 id="docker-compose">Docker compose</h1>

<p>Purpose: compose is a tool designed to create multi-containers app.</p>

<h2 id="install">Install</h2>

<pre><code>sudo apt install python-pip
pip install docker-compose
</code></pre>

<h2 id="docker-compose.yml">docker-compose.yml</h2>

<p>The magic happens in a file named <code>docker-compose.yml</code></p>

<h2 id="run">Run</h2>

<pre><code>docker-compose up -d
</code></pre>

<h2 id="stop">Stop</h2>

<pre><code>docker-compose down -v
</code></pre>

<h2 id="networking">Networking</h2>

<p><code>docker-compose</code> handles the creation a private network:</p>

<pre><code>Creating network "n-tiers_default" with the default driver
Creating object-cache ... done
Creating pgsql        ... done
Creating web          ... done
</code></pre>

<h1 id="example">Example</h1>

<p>Better than words, take a look at this <a href="https://github.com/benIT/docker-compose-n-tiers">repo that illustrates a classical n-tiers web app</a></p>
]]></content>
        </entry>
    </feed>