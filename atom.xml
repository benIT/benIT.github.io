<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[benIT]]></title>
    <link href="/atom.xml" rel="self"/>
    <link href="/"/>
    <updated>2018-01-11T16:21:24+01:00</updated>
    <id>/</id>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[Setting up a memcached server with PHP7.X and a NGINX webserver]]></title>
            <link href="/blog/2018/01/11/php7-nginx-memcached-session"/>
            <updated>2018-01-11T00:00:00+01:00</updated>
            <id>/blog/2018/01/11/php7-nginx-memcached-session</id>
            <content type="html"><![CDATA[<h2 id="memcached-server-side">Memcached server side</h2>

<p>This server has private @IP : 192.168.33.14</p>

<h3 id="install-memcached%3A">Install memcached:</h3>

<pre><code>sudo apt-get install memcached
</code></pre>

<p>In <code>/etc/memcached.conf</code>, set up memory to 256 Mo:</p>

<pre><code>-m 256
</code></pre>

<p>In <code>/etc/memcached.conf</code>, set up listening private @IP of the server:</p>

<pre><code># Specify which IP address to listen on. The default is to listen on all IP addresses
# This parameter is one of the only security measures that memcached has, so make sure
# it's listening on a firewalled interface.
#-l 127.0.0.2
-l 192.168.33.14
</code></pre>

<h2 id="web-server-side">Web server side</h2>

<p>This server has private @IP : 192.168.33.11</p>

<h3 id="install-php-extension">Install PHP extension</h3>

<p>On the server that hosts nginx + php7.0:</p>

<pre><code>sudo apt-get install -y php-memcached
</code></pre>

<h3 id="configure-php">Configure PHP</h3>

<p>In <code>/etc/php/7.0/fpm/php.ini</code>:</p>

<pre><code>[Session]
; Handler used to store/retrieve data.
; http://php.net/session.save-handler
#session.save_handler = files
session.save_handler = memcached
session.save_path = 'tcp://192.162.33.14:11211'
</code></pre>

<h3 id="restart-services">Restart services</h3>

<pre><code>sudo service php7.0-fpm restart &amp;&amp; sudo service nginx restart
</code></pre>

<h3 id="check-config">Check config</h3>

<p>Create a phpinfo.php that calls <code>phpinfo()</code> and check memcached configuration.</p>

<h3 id="checking">Checking</h3>

<h3 id="checking-sessions-are-well-handled-by-memcached">Checking sessions are well handled by memcached</h3>

<p>Let's write a simple script to check sessions:</p>

<pre><code>session_start();
if(!isset($_SESSION['visit']))
{   
    echo "This is the first time you're visiting this server\n";
    $_SESSION['visit'] = 0;
}   
else
        echo "Your number of visits: ".$_SESSION['visit'] . "\n";

$_SESSION['visit']++;

echo "Server IP: ".$_SERVER['SERVER_ADDR'] . "\n";
echo "Client IP: ".$_SERVER['REMOTE_ADDR'] . "\n";
print_r($_COOKIE);
</code></pre>

<h3 id="checking-memcached-key%2Fvalue-server">Checking memcached key/value server</h3>

<p>Let's write a simple script to key/value access:</p>

<pre><code>$mem = new Memcached();
$mem-&gt;addServer("192.168.33.14", 11211);
$result = $mem-&gt;get("blah");
if ($result) {
    echo $result;
} else {
    echo "No matching key found yet. Let's start adding that now!";
    $mem-&gt;set("blah", "I am data!  I am held in memcached!") or die("Couldn't save anything to memcached...");
}   
</code></pre>

<h3 id="dumping-all-key%2Fvalue-records">Dumping all key/value records</h3>

<script src="https://gist.github.com/benIT/2e63d3541f4f46d9a47777d467549d2e.js"></script>

<h2 id="sources">Sources</h2>

<ul>
<li>https://www.digitalocean.com/community/tutorials/how-to-share-php-sessions-on-multiple-memcached-servers-on-ubuntu-14-04</li>
<li>http://www.servermom.org/install-use-memcached-nginx-php-7-ubuntu-16-04/3670/</li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Configure moodle 3.x session handling with memcached]]></title>
            <link href="/blog/2018/01/11/configure-moodle-session-handling-with-memcached"/>
            <updated>2018-01-11T00:00:00+01:00</updated>
            <id>/blog/2018/01/11/configure-moodle-session-handling-with-memcached</id>
            <content type="html"><![CDATA[<p>This procedure has been tested on Moodle <a href="https://github.com/moodle/moodle/commit/7223cd2518ad3b37901b736d6b62e7badd4ecaa1">version 3.0.6+</a> with a dedicated memcached server which @IP:port is 192.168.33.14:11211.</p>

<h2 id="set-up-a--memcached-server">Set up a  memcached server</h2>

<p>see <a href="/blog2018-01-11-php7-nginx-memcached-session">this post</a>.</p>

<h2 id="configure-moodle">Configure moodle</h2>

<p>Configure <a href="https://docs.moodle.org/30/en/Session_handling#Memcached">session handling</a> in <code>config.php</code>:</p>

<pre><code>/********************************************/
//MEMCACHED SETUP
$CFG-&gt;session_handler_class = '\core\session\memcached';
$CFG-&gt;session_memcached_save_path = '192.168.33.14:11211';
$CFG-&gt;session_memcached_prefix = 'memc.sess.key.';
$CFG-&gt;session_memcached_acquire_lock_timeout = 120;
$CFG-&gt;session_memcached_lock_expire = 7200;       // Ignored if memcached extension &lt;= 2.1.0
/********************************************/
</code></pre>

<h2 id="checkings">Checkings</h2>

<h2 id="moodle-cookie">Moodle cookie</h2>

<p>If you print out your cookie from your debug tool in your bowser, you well see a cookie named <code>MoodleSession</code></p>

<p>In my case it has value <code>4gp94gr17g78jnh97a6mfml0b4</code></p>

<h2 id="moodle-database">Moodle database</h2>

<p>Now let's check if there is still record in DB for your cookie session:</p>

<pre><code>SELECT * FROM mdl_sessions WHERE sid='4gp94gr17g78jnh97a6mfml0b4';
</code></pre>

<p>returns:</p>

<pre><code>2507694 0   4gp94gr17g78jnh97a6mfml0b4  48521       1515679016  1515681908  192.168.33.1    192.168.33.1
</code></pre>

<p>What ??? I was expecting to have no more entries in the mdl_sessions table.
After searching a little bit more, I found the explanation <a href="https://moodle.org/mod/forum/discuss.php?d=326352">here</a>:</p>

<pre><code>Normally when you have sessions stored in Memcache/d there will still be a record of the session written to mdl_sessions. The session data is not written to the database, it's only written to the memcache/d server itself. The performance gain is seen because the session data is not written every page view for every user, and thus the table rows are not continually being locked and unlocked.
</code></pre>

<h2 id="memcached-server">memcached server</h2>

<p>Let's check if there is a key/value record for ou session:</p>

<script src="https://gist.github.com/benIT/2e63d3541f4f46d9a47777d467549d2e.js"></script>

<p>run it:</p>

<pre><code>php memcached.php | grep 4gp94gr17g78jnh97a6mfml0b4
</code></pre>

<p>prints:</p>

<pre><code>key: memc.sess.key.4gp94gr17g78jnh97a6mfml0b4
</code></pre>

<p>which means that our session is written in memcached! That's ok!</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Docker basics]]></title>
            <link href="/blog/2017/12/08/docker-basics"/>
            <updated>2017-12-08T00:00:00+01:00</updated>
            <id>/blog/2017/12/08/docker-basics</id>
            <content type="html"><![CDATA[<h2 id="containers">Containers</h2>

<p>A container is a way to create isolated env that can run code while sharing a single OS.</p>

<h3 id="run-a-container">Run a container</h3>

<pre><code>docker container run -p 9999:80 httpd:2.4
</code></pre>

<p>The <code>--detach</code> flag can be used to run the container in background:</p>

<pre><code>docker container run --detach -p 9999:80 httpd:2.4
</code></pre>

<h3 id="list-containers">List containers</h3>

<pre><code>docker container ls
</code></pre>

<h3 id="run-commands-on-container">Run commands on container</h3>

<pre><code>docker container exec my_container_name du -mh
</code></pre>

<h3 id="attaching-a-shell-to-a-container">Attaching a Shell to a Container</h3>

<p>To get a shell inside the container:</p>

<pre><code>docker container exec -it my_container_name /bin/bash

PATH=$PATH:/usr/games/
export PATH
</code></pre>

<h2 id="dockerfiles">Dockerfiles</h2>

<p>Dockerfile -> create an image -> to generate a container</p>

<p>Inside a file named <code>Dockerfile</code>.</p>

<h3 id="dockerfile-example">Dockerfile example</h3>

<pre><code>FROM httpd:2.4
EXPOSE 80
RUN apt-get update &amp;&amp; apt-get install -y fortunes
COPY page.html /var/www/html/
LABEL maintainer="moby-dock@example.com"
</code></pre>

<h3 id="building-an-image-from-a-dockerfile">Building an Image From a Dockerfile</h3>

<pre><code>docker image build --tag web-server:1.0 .
</code></pre>

<p>End the command with a single . so it knows to look for the Dockerfile in the same folder that the command is run in.</p>

<pre><code>docker image ls


docker container run -p 80:80 web-server:1.0
</code></pre>

<h2 id="volumes">Volumes</h2>

<p>It is possible to copy files into a container but files will be lost when container stops.</p>

<pre><code>docker container cp page.html my_container_name:/var/www/html/.
</code></pre>

<p>A better solution is to use volumes.
Data volumes expose files on your host machine to the container.</p>

<h3 id="creating-a-volume">Creating a Volume</h3>

<pre><code>docker run -d -p 80:80 -v /my-files:/var/www/html web-server:1.1
</code></pre>

<p>Shared folder  between <code>/my-files</code> on host machine and the <code>html</code> folder in the container</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Debian:  fixing error: &#039;A start job is running for dev-disk-...&#039;]]></title>
            <link href="/blog/2017/11/13/debian-fixing-error-after-partition-edition"/>
            <updated>2017-11-13T00:00:00+01:00</updated>
            <id>/blog/2017/11/13/debian-fixing-error-after-partition-edition</id>
            <content type="html"><![CDATA[<h2 id="error-encountered">Error encountered</h2>

<p>After editing partitions to enlarge my vagrant box. The following error is encountered and the machine took 1min30 to boot:</p>

<pre><code>A start job is running for dev-disk-by\x2duuid
</code></pre>

<h2 id="solution">Solution</h2>

<h3 id="list-machine-partition-by-uuid">List machine partition by-uuid</h3>

<pre><code>vagrant@moodle-prod:~$ ls -l /dev/disk/by-uuid/
total 0
lrwxrwxrwx 1 root root 10 Nov 13 08:49 a01bd0bf-1ffc-400d-b383-d74354750926 -&gt; ../../sda2
lrwxrwxrwx 1 root root 10 Nov 13 08:49 db36bd9a-c8f7-4b02-bb1a-81e4913a21d7 -&gt; ../../sda1
</code></pre>

<h3 id="check-%60%2Fetc%2Ffstab%60-file">Check <code>/etc/fstab</code> file</h3>

<pre><code>vagrant@moodle-prod:~$ sudo cat /etc/fstab
# /etc/fstab: static file system information.
#
# Use 'blkid' to print the universally unique identifier for a
# device; this may be used with UUID= as a more robust way to name devices
# that works even if disks are added and removed. See fstab(5).
#
# &lt;file system&gt; &lt;mount point&gt;   &lt;type&gt;  &lt;options&gt;       &lt;dump&gt;  &lt;pass&gt;
# / was on /dev/vda1 during installation
UUID=db36bd9a-c8f7-4b02-bb1a-81e4913a21d7 /               ext4    errors=remount-ro 0       1
# swap was on /dev/vda5 during installation
UUID=8d7d9300-7fd3-4a5a-bfd1-9bc61a20fabd none            swap    sw              0       0
/dev/sr0        /media/cdrom0   udf,iso9660 user,noauto     0       0
</code></pre>

<h3 id="swap-uuid-has-changed">SWAP UUID has changed</h3>

<p>Problem: SWAP UID has changed</p>

<pre><code># swap was on /dev/vda5 during installation
UUID=8d7d9300-7fd3-4a5a-bfd1-9bc61a20fabd none            swap    sw     
</code></pre>

<p>Edit this line with the new UUID (change '8d7d9300-7fd3-4a5a-bfd1-9bc61a20fabd' to 'a01bd0bf-1ffc-400d-b383-d74354750926') in <code>/etc/fstab</code>:</p>

<pre><code>UUID=a01bd0bf-1ffc-400d-b383-d74354750926 none            swap    sw              0       0
</code></pre>

<h2 id="check">Check</h2>

<p>Everything is now fine! Error solved!</p>

<p><a href="https://www.debian-fr.org/t/demarrage-a-start-job-is-running-for-dev-disk-by-x2duuid/64527">source</a></p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Moodle 3.X: activate debug whithout GUI]]></title>
            <link href="/blog/2017/11/09/moodle-activate-debug-using-sql"/>
            <updated>2017-11-09T00:00:00+01:00</updated>
            <id>/blog/2017/11/09/moodle-activate-debug-using-sql</id>
            <content type="html"><![CDATA[<p>If you need to activate debug but you cannot access moodle admin page, this article is for you:</p>

<h2 id="step-1%3A-note-original-settings">Step 1: note original settings</h2>

<pre><code>SELECT name, value
FROM mdl_config
where name ='debug' or name ='debugdisplay'
;
</code></pre>

<p>for instance :</p>

<pre><code>debug   0
debugdisplay    0
</code></pre>

<h2 id="step-2-%3A-setup-debug-config-in-db">Step 2 : setup debug config in db</h2>

<pre><code>UPDATE mdl_config SET VALUE = 32767 WHERE name = 'debug';
UPDATE mdl_config SET VALUE = 1 WHERE name = 'debugdisplay';
</code></pre>

<h2 id="step-3%3A-clear-cache-from-cli">Step 3: clear cache from CLI</h2>

<pre><code>php  moodle/admin/cli/purge_caches.php
</code></pre>

<h2 id="step-4%3A-restore-original-settings">Step 4: restore original settings</h2>

<pre><code>UPDATE mdl_config SET VALUE = 0 WHERE name = 'debug';
UPDATE mdl_config SET VALUE = 0 WHERE name = 'debugdisplay';
</code></pre>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[SSH key authentication]]></title>
            <link href="/blog/2017/11/06/ssh-key-authentication"/>
            <updated>2017-11-06T00:00:00+01:00</updated>
            <id>/blog/2017/11/06/ssh-key-authentication</id>
            <content type="html"><![CDATA[<p>Access your server using ssh key authentication.</p>

<p>If you loose your time, typing password, this is for you:</p>

<h2 id="generate-ssh-authentication-keys-on-the-client-side">Generate ssh authentication keys on the client side</h2>

<pre><code>ssh-keygen -t rsa
</code></pre>

<h2 id="create-a-.ssh-folder-on-the-server">Create a .ssh folder on the server</h2>

<pre><code>ssh pi@192.168.1.84 mkdir -p .ssh
</code></pre>

<h2 id="grant-the-client-to-access-to-the-server-using-public-key">Grant the client to access to the server using public key</h2>

<pre><code>cat .ssh/id_local.pub | ssh pi@192.168.1.84 'cat &gt;&gt; .ssh/authorized_keys'
</code></pre>

<h2 id="connect-to-server-without-password">Connect to server without password</h2>

<pre><code>ssh pi@192.168.1.84
</code></pre>

<p>That's it, you can now access your server whithout typing your password!</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Apache2 survival sheet]]></title>
            <link href="/blog/2017/10/02/apache2-survival-sheet"/>
            <updated>2017-10-02T00:00:00+02:00</updated>
            <id>/blog/2017/10/02/apache2-survival-sheet</id>
            <content type="html"><![CDATA[<p>In this post, the most common Apache2 commands that I use are listed. This is not really interesting but I'm bored of asking google for it every week!</p>

<h2 id="virtual-host">Virtual host</h2>

<h2 id="enable-a-vhost">Enable a vhost</h2>

<pre><code>a2ensite video-app
</code></pre>

<h2 id="disable--a-vhost">Disable  a vhost</h2>

<pre><code>a2dissite video-app
</code></pre>

<h2 id="modules">Modules</h2>

<h3 id="list-enables%2Floaded-modules">List enables/loaded modules</h3>

<pre><code>apache2ctl -M
</code></pre>

<h3 id="enable-a-module">Enable a module</h3>

<pre><code>sudo a2enmod rewrite
</code></pre>

<h2 id="server-status">Server status</h2>

<pre><code>apache2ctl status
</code></pre>

<h2 id="securing-a-vhost-with-a-basic-authentication">Securing a vhost with a basic authentication</h2>

<p>install utils:</p>

<pre><code>apt-get install apache2 apache2-utils
</code></pre>

<p>Generate password for user ben:</p>

<pre><code>htpasswd -c /etc/apache2/.htpasswd ben

cat /etc/apache2/.htpasswd
</code></pre>

<p>output:</p>

<pre><code> ben:$apr1$ULdWsbYp$eawlgBJZvKhr7L8V1NWGD/
</code></pre>

<p>Secure your vhost:</p>

<pre><code>    LISTEN 10000 
    &lt;VirtualHost *:10000&gt; 
            ServerAdmin webmaster@localhost
            DocumentRoot /home/pi/projects/videoapp/web/
             &lt;Directory /home/pi/projects/videoapp&gt;
                    Options Indexes FollowSymLinks
                    AllowOverride All
                    AuthType Basic
                    AuthName "Restricted Content"
                    AuthUserFile /etc/apache2/.htpasswd
                    Require valid-user
            &lt;/Directory&gt;
            ErrorLog /error-videoapp.log
            CustomLog /access-videoapp.log combined
    &lt;/VirtualHost&gt;
</code></pre>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[PostgreSQL survival sheet]]></title>
            <link href="/blog/2017/09/28/postgresql-survival-sheet"/>
            <updated>2017-09-28T00:00:00+02:00</updated>
            <id>/blog/2017/09/28/postgresql-survival-sheet</id>
            <content type="html"><![CDATA[<p>In this post, the most common pgsql commands that I use are listed. This is not really interesting but I'm bored of asking google for it every week!</p>

<h2 id="start-psql-command-line-utility">Start psql command line utility</h2>

<p>Using the <code>postgres</code> superuser:</p>

<pre><code>sudo -u postgres psql
</code></pre>

<h2 id="exit">Exit</h2>

<pre><code>postgres=# \q
</code></pre>

<h2 id="list-databases">List databases</h2>

<pre><code>postgres=# \l+
</code></pre>

<p>output:</p>

<pre><code>                                                                    List of databases
    Name    |  Owner   | Encoding |   Collate   |    Ctype    |   Access privileges   |  Size   | Tablespace |                Description                 
------------+----------+----------+-------------+-------------+-----------------------+---------+------------+--------------------------------------------
 clipbucket | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 |                       | 6532 kB | pg_default | 
 moodle     | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 |                       | 6532 kB | pg_default | 
 postgres   | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 |                       | 6532 kB | pg_default | default administrative connection database
 template0  | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +| 6409 kB | pg_default | unmodifiable empty database
            |          |          |             |             | postgres=CTc/postgres |         |            | 
 template1  | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +| 6532 kB | pg_default | default template for new databases
            |          |          |             |             | postgres=CTc/postgres |         |            | 
 testdb     | testdb   | UTF8     | en_US.UTF-8 | en_US.UTF-8 |                       | 6724 kB | pg_default | 
 videoapp   | videoapp | UTF8     | en_US.UTF-8 | en_US.UTF-8 |                       | 6724 kB | pg_default | 
(7 rows)
</code></pre>

<h2 id="drop-database">Drop database</h2>

<pre><code>postgres=# DROP DATABASE testdeploy;
</code></pre>

<p>output:</p>

<pre><code>postgres=# DROP DATABASE
</code></pre>

<h2 id="list-users">List users</h2>

<pre><code>postgres=# \du+
</code></pre>

<p>output :</p>

<pre><code>                                   List of roles
   Role name    |                   Attributes                   | Member of | Description 
----------------+------------------------------------------------+-----------+-------------
 clipbucket     |                                                | {}        | 
 manuel         | Create DB                                      | {}        | 
 moodle         |                                                | {}        | 
 postgres       | Superuser, Create role, Create DB, Replication | {}        | 
 testdb         | Create DB                                      | {}        | 
 testdeploy     | Create DB                                      | {}        | 
 testdeploytest | Create DB                                      | {}        | 
 videoapp       | Create DB                                      | {}        | 
</code></pre>

<h2 id="drop-user">Drop user</h2>

<pre><code>postgres=# DROP USER testdeploy;
</code></pre>

<p>output:</p>

<pre><code>DROP ROLE
</code></pre>

<h2 id="create-user">Create user</h2>

<pre><code>postgres=# CREATE USER videoapp WITH PASSWORD 'videoapp' CREATEDB ;
</code></pre>

<p>output:</p>

<pre><code>CREATE ROLE
</code></pre>

<h2 id="list-db-tables">List DB tables</h2>

<h3 id="switch-user">Switch user</h3>

<pre><code>postgres=# \c videoapp
</code></pre>

<p>output:</p>

<pre><code>You are now connected to database "videoapp" as user "postgres".
</code></pre>

<h3 id="list-tables">List tables</h3>

<pre><code>videoapp=# \dt+
</code></pre>

<p>output:</p>

<pre><code>                         List of relations
 Schema |    Name     | Type  |  Owner   |    Size    | Description 
--------+-------------+-------+----------+------------+-------------
 public | fos_user    | table | videoapp | 8192 bytes | 
 public | tag         | table | videoapp | 0 bytes    | 
 public | video       | table | videoapp | 8192 bytes | 
 public | videos_tags | table | videoapp | 0 bytes    | 
(4 rows)
</code></pre>

<h2 id="config-files">Config files</h2>

<h2 id="determine-which-config-file-is-in-use">Determine which config file is in use</h2>

<pre><code>SHOW config_file ;
</code></pre>

<h2 id="determine-which-hba-file-is-in-use">Determine which hba file is in use</h2>

<pre><code>SHOW hba_file;
</code></pre>

<h2 id="connection">Connection</h2>

<h3 id="remote-connection">Remote connection</h3>

<p>In <code>postgresql.conf</code>:</p>

<pre><code>listen_addresses = '*'
</code></pre>

<p>In <code>pg_hba.conf</code>:</p>

<pre><code>host  all  all 0.0.0.0/0 md5
</code></pre>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Vagrant share ssh agent between host and guests]]></title>
            <link href="/blog/2017/07/10/vagrant-share-ssh-agent"/>
            <updated>2017-07-10T00:00:00+02:00</updated>
            <id>/blog/2017/07/10/vagrant-share-ssh-agent</id>
            <content type="html"><![CDATA[<h2 id="why%3F">Why?</h2>

<p>In this way you can share from your host multiple ssh keys without copy/paste its on each VM. All ssh key are centralised and that's better when working with a lot of VM.</p>

<h2 id="how-to%3F">How to?</h2>

<h3 id="on-the-host-side">On the host side</h3>

<p>In <code>~/.ssh/config</code>:</p>

<pre><code>#share ssh agentwith VM
Host *
 ForwardAgent yes 
</code></pre>

<h3 id="on-the-guest-side">On the guest side</h3>

<p>In <code>Vagrantfile</code>:</p>

<pre><code>config.ssh.forward_agent = true
</code></pre>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Cool open source software for home]]></title>
            <link href="/blog/2017/07/07/open-source-list"/>
            <updated>2017-07-07T00:00:00+02:00</updated>
            <id>/blog/2017/07/07/open-source-list</id>
            <content type="html"><![CDATA[<p>I spent many years to find a full and cool stack of open source software for home. Here is my personal open source software list, that I really enjoy.</p>

<h2 id="os">OS</h2>

<p>After testing several linux (fedora, opensuse, debian, ubuntu ...), I think the easiest for home are debian based OS:</p>

<ul>
<li><a href="https://www.debian.org/index.fr.html">linux debian</a>: robust</li>
<li><a href="https://www.linuxmint.com/">linux mint</a>: like ubuntu without the commercial taste</li>
</ul>

<h2 id="system">System</h2>

<ul>
<li><a href="http://gparted.org/">gparted</a>: partition made easy</li>
<li><a href="http://clonezilla.org/">clonezilla</a>: restore your OS</li>
</ul>

<h2 id="privacy">Privacy</h2>

<ul>
<li><a href="https://www.veracrypt.fr/en/Home.html">veracrypt</a>: awesome. No more USB key or sensitive data without that </li>
<li><a href="http://keepass.info/">keepass</a>: cannot live without that</li>
</ul>

<h2 id="web-browser">Web browser</h2>

<ul>
<li><a href="https://www.mozilla.org/fr/firefox">firefox</a>: a must have</li>
<li><a href="https://www.chromium.org/Home">chromium</a>: powerfull</li>
</ul>

<h2 id="filesharing">Filesharing</h2>

<ul>
<li><a href="https://nextcloud.com/">nextcloud</a>: bye bye dropbox</li>
<li>rsync: backup your data at a friend house</li>
<li>ssh: connect to a friend house</li>
</ul>

<h2 id="gps">GPS</h2>

<ul>
<li><a href="https://sourceforge.net/projects/viking/?SetFreedomCookie">viking</a>: awesome for GPS tracking</li>
</ul>

<h2 id="office">Office</h2>

<ul>
<li><a href="https://fr.libreoffice.org/">libreoffice</a>: for documents, spreadsheets</li>
<li><a href="https://www.mozilla.org/fr/thunderbird/">thunderbird</a>: for mailing and RSS</li>
</ul>

<h2 id="text-editor">Text editor</h2>

<ul>
<li><a href="http://www.vim.org/download.php">vim</a>: you must know that stuff</li>
<li><a href="https://atom.io/">atom</a>: bye bye sublime text</li>
</ul>

<h2 id="image-editor">Image editor</h2>

<ul>
<li><a href="https://pinta-project.com/pintaproject/pinta/">pinta</a>: for simple editing</li>
<li><a href="https://www.gimp.org/fr/">gimp</a>: for complex editing</li>
</ul>

<h2 id="multimedia">Multimedia</h2>

<ul>
<li><a href="https://www.videolan.org/vlc/index.fr.html">vlc</a>: this stuff reads and streams everything</li>
</ul>

<h2 id="website">Website</h2>

<ul>
<li><a href="https://fr.wordpress.com/">wordpress</a>: cool for associations website</li>
<li><a href="https://sculpin.io/">sculpin</a>: cool for static content.</li>
</ul>
]]></content>
        </entry>
    </feed>