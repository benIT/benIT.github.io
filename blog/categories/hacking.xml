<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[benIT&#039;s notebook]]></title>
    <link href="/blog/categories/hacking.xml" rel="self"/>
    <link href="/"/>
    <updated>2019-05-06T14:14:38+00:00</updated>
    <id>/</id>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[RIP a password protected archive with John the Ripper]]></title>
            <link href="/blog/2019/05/06/john-the-ripper-rip-archive"/>
            <updated>2019-05-06T00:00:00+00:00</updated>
            <id>/blog/2019/05/06/john-the-ripper-rip-archive</id>
            <content type="html"><![CDATA[<h2 id="install-kali">Install KALI</h2>

<p>First, <a href="https://www.kali.org/news/announcing-kali-for-vagrant/">intall a kali headless VM with vagrant</a>.</p>

<p>Grant large CPUs and RAM resources to the VM. For instance, in <code>Vagrantfile</code>:</p>

<pre><code># Create a forwarded port
config.vm.network "forwarded_port", guest: 80, host: 8080

# Create a private network. In VirtualBox, this is a Host-Only network
config.vm.network "private_network", ip: "192.168.33.101"

# VirtualBox specific settings
config.vm.provider "virtualbox" do |vb|
# Hide the VirtualBox GUI when booting the machine
vb.gui = false

# Customize the amount of memory on the VM:
vb.memory = "8192"
vb.cpus= "5"
end

# Provision the machine with a shell script
config.vm.provision "shell", inline: &lt;&lt;-SHELL
apt-get update
apt-get install -y crowbar
SHELL
end
</code></pre>

<h2 id="generate-a-test-archive">Generate a test archive</h2>

<pre><code>echo "foo bar" &gt; file.txt
zip -P pass archive.zip file.txt
</code></pre>

<p><strong>Thus, our archive is protected with the password: <code>pass</code></strong></p>

<p>Test password protection:</p>

<pre><code>unzip archive.zip 
Archive:  archive.zip
[archive.zip] file.txt password: 
</code></pre>

<h2 id="rip-archive.zip">RIP archive.zip</h2>

<h3 id="get-password-hash-with-zip2john">Get password hash with zip2john</h3>

<pre><code>zip2john archive.zip &gt; hash.txt
</code></pre>

<p>Prints :</p>

<pre><code>ver 1.0 efh 5455 efh 7875 archive.zip/file.txt PKZIP Encr: 2b chk, TS_chk, cmplen=20, decmplen=8, crc=13DDB427
</code></pre>

<h3 id="rip-hash">RIP hash</h3>

<pre><code>john hash.txt
</code></pre>

<p>Prints:</p>

<pre><code>Using default input encoding: UTF-8
Loaded 1 password hash (PKZIP [32/64])
Will run 2 OpenMP threads
Proceeding with single, rules:Wordlist
Press 'q' or Ctrl-C to abort, almost any other key for status
Warning: Only 4 candidates buffered for the current salt, minimum 8
needed for performance.
Warning: Only 5 candidates buffered for the current salt, minimum 8
needed for performance.
Warning: Only 6 candidates buffered for the current salt, minimum 8
needed for performance.
Warning: Only 4 candidates buffered for the current salt, minimum 8
needed for performance.
Almost done: Processing the remaining buffered candidate passwords, if any
Proceeding with wordlist:/usr/share/john/password.lst, rules:Wordlist
pass             (archive.zip/file.txt)
1g 0:00:00:00 DONE 2/3 (2019-05-06 09:53) 50.00g/s 2109Kp/s 2109Kc/s 2109KC/s 123456..Peter
Use the "--show" option to display all of the cracked passwords reliably
Session completed
</code></pre>

<h3 id="and-archive-password-is...">And archive password is...</h3>

<pre><code>pass             (archive.zip/file.txt)
</code></pre>

<h3 id="tips">Tips</h3>

<p>If you run <code>john</code> again, you will get:</p>

<pre><code>john hash.txt
Using default input encoding: UTF-8
Loaded 1 password hash (PKZIP [32/64])
No password hashes left to crack (see FAQ)
</code></pre>

<p>This means that the password has already been ripped, to print password check <code>.john/john.pot</code> file or use <code>--show</code> option:</p>

<pre><code>john hash.txt --show
archive.zip/file.txt:pass:file.txt:archive.zip::archive.zip

1 password hash cracked, 0 left
</code></pre>
]]></content>
        </entry>
    </feed>