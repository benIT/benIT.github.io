<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[benIT&#039;s notebook]]></title>
    <link href="/blog/categories/linux.xml" rel="self"/>
    <link href="/"/>
    <updated>2019-09-30T14:44:19+00:00</updated>
    <id>/</id>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[CentOS course notes]]></title>
            <link href="/blog/2019/09/30/centos-course-notes"/>
            <updated>2019-09-30T00:00:00+00:00</updated>
            <id>/blog/2019/09/30/centos-course-notes</id>
            <content type="html"><![CDATA[<h2 id="networking">networking</h2>

<p>Network Manager CLI: <code>nmcli</code></p>

<p>list all interfaces:</p>

<pre><code>ip a
</code></pre>

<h3 id="centos">centos</h3>

<p>example: <code>/etc/sysconfig/network-scripts/ifcfg-enp0s3</code>
naming:</p>

<pre><code>en: Ethernet Network
p0: bus PCI n°0
s3: slot 3
</code></pre>

<h2 id="%40ip-detail-fro-interface-enp0s3">@ip detail fro interface enp0s3</h2>

<pre><code>ip addr show enp0s3
</code></pre>

<p>Create a virtualbox nat network: 10.0.3.0/24</p>

<pre><code>10.0.3.1: gateway
10.0.3.2: gateway
10.0.3.3: DNS
</code></pre>

<p>1st @ip is: <code>10.0.3.4</code></p>

<h3 id="static-%40ip">static @ip</h3>

<p>vim /etc/sysconfig/network-scripts/ifcfg-enp0s3</p>

<pre><code>TYPE="Ethernet"
NM_CONTROLLED="no"

PROXY_METHOD="none"
BROWSER_ONLY="no"

BOOTPROTO="static"

DEFROUTE="yes"
IPV4_FAILURE_FATAL="no"
IPV6INIT="no"
#IPV6_AUTOCONF="yes"
#IPV6_DEFROUTE="yes"
#IPV6_FAILURE_FATAL="no"
#IPV6_ADDR_GEN_MODE="stable-privacy"

IPADDR=10.0.3.5
NETMASK=255.255.255.0
GATEWAY=10.0.3.1
DNS1=1.1.1.1

NAME="enp0s3"
UUID="f7b6b794-8d98-4c80-93ed-1b2ce803457e"
DEVICE="enp0s3"
ONBOOT="yes"

systemctl restart network

ping 1.1.1.1
ping google.fr
</code></pre>

<p>show internal route table:
    ip route</p>

<pre><code>default via 10.0.3.1 dev enp0s3 
10.0.3.0/24 dev enp0s3 proto kernel scope link src 10.0.3.5 
169.254.0.0/16 dev enp0s3 scope link metric 1002 
</code></pre>

<h2 id="arp-adress-resolution-protocol-%3A-mapping-%40mac-%40ip">ARP Adress resolution Protocol : mapping @mac &lt;=>@IP</h2>

<p>ip n show</p>

<h2 id="firewall">Firewall</h2>

<pre><code>firewall-cmd  --get-default-zone


firewall-cmd --permanent  --add-service https  


firewall-cmd  --zone=public --list-all

public (active)
  target: default
  icmp-block-inversion: no
  interfaces: enp0s3
  sources: 
  services: dhcpv6-client https ssh
  ports: 
  protocols: 
  masquerade: no
  forward-ports: 
  source-ports: 
  icmp-blocks: 
  rich rules:   
</code></pre>

<h2 id="virtualbox-guest-additions">Virtualbox guest additions</h2>

<pre><code>click 'insert guest addition CD'
mount /dev/cdrom /media/cdrom
cd /media/cdrom
KERN_DIR=/usr/src/kernels/$(uname -r)
export KERN_DIR
./VBoxLinuxAdditions.run
</code></pre>

<h2 id="mate-gui">MATE GUI</h2>

<pre><code>yum install -y epel-release
yum groupinstall -y "MATE Desktop"
systemctl set-default graphical.target
</code></pre>

<h2 id="partitioning">Partitioning</h2>

<h3 id="%C2%A0create-a-physical-partition"> Create a physical partition</h3>

<pre><code>fdisk /dev/sdb
Bienvenue dans fdisk (util-linux 2.23.2).

Les modifications resteront en mémoire jusqu'à écriture.
Soyez prudent avant d'utiliser la commande d'écriture.

Le périphérique ne contient pas de table de partitions reconnue
Construction d'une nouvelle étiquette pour disque de type DOS avec identifiant de disque 0xf858f73b.

Commande (m pour l'aide) : m
Commande d'action
   a   toggle a bootable flag
   b   edit bsd disklabel
   c   toggle the dos compatibility flag
   d   delete a partition
   g   create a new empty GPT partition table
   G   create an IRIX (SGI) partition table
   l   list known partition types
   m   print this menu
   n   add a new partition
   o   create a new empty DOS partition table
   p   print the partition table
   q   quit without saving changes
   s   create a new empty Sun disklabel
   t   change a partition's system id
   u   change display/entry units
   v   verify the partition table
   w   write table to disk and exit
   x   extra functionality (experts only)

Commande (m pour l'aide) : n
Type de partition :
   p   primaire (0 primaire(s), 0 étendue(s), 4 libre(s))
  e   étendue
Sélection (p par défaut) : p
Numéro de partition (1-4, 1 par défaut) : 1
Premier secteur (2048-41943039, 2048 par défaut) : 
Utilisation de la valeur 2048 par défaut
Dernier secteur, +secteur ou +taille{K,M,G} (2048-41943039, 41943039 par défaut) : +5G
La partition 1 de type Linux et de taille 5 GiB est configurée

Commande (m pour l'aide) : m
Commande d'action
   a   toggle a bootable flag
   b   edit bsd disklabel
   c   toggle the dos compatibility flag
   d   delete a partition
   g   create a new empty GPT partition table
   G   create an IRIX (SGI) partition table
   l   list known partition types
   m   print this menu
   n   add a new partition
   o   create a new empty DOS partition table
   p   print the partition table
   q   quit without saving changes
   s   create a new empty Sun disklabel
   t   change a partition's system id
   u   change display/entry units
   v   verify the partition table
   w   write table to disk and exit
   x   extra functionality (experts only)

Commande (m pour l'aide) : w
La table de partitions a été altérée.

Appel d'ioctl() pour relire la table de partitions.
Synchronisation des disques.

partition créé, non formatée; inutilisable pour le moment
</code></pre>

<h3 id="create-a-15-go-extended-partition-on-all-remaning-space">Create a 15 GO extended partition on all remaning space</h3>

<pre><code>fdisk /dev/sdb
Bienvenue dans fdisk (util-linux 2.23.2).

Les modifications resteront en mémoire jusqu'à écriture.
Soyez prudent avant d'utiliser la commande d'écriture.


Commande (m pour l'aide) : n
Type de partition :
   p   primaire (1 primaire(s), 0 étendue(s), 3 libre(s))
  e   étendue
Sélection (p par défaut) : e
Numéro de partition (2-4, 2 par défaut) : 2
Premier secteur (10487808-41943039, 10487808 par défaut) : 
Utilisation de la valeur 10487808 par défaut
Dernier secteur, +secteur ou +taille{K,M,G} (10487808-41943039, 41943039 par défaut) : 
Utilisation de la valeur 41943039 par défaut
La partition 2 de type Extended et de taille 15 GiB est configurée
</code></pre>

<h3 id="add-3go-logical-partition-inside-the-extended-partition">Add 3Go logical partition inside the extended partition</h3>

<pre><code>Commande (m pour l'aide) : n
Type de partition :
   p   primaire (1 primaire(s), 1 étendue(s), 2 libre(s))
   l   logique (numéroté à partir de 5)
Sélection (p par défaut) : l
Ajout de la partition logique 5
Premier secteur (10489856-41943039, 10489856 par défaut) : 
Utilisation de la valeur 10489856 par défaut
Dernier secteur, +secteur ou +taille{K,M,G} (10489856-41943039, 41943039 par défaut) : +3G
La partition 5 de type Linux et de taille 3 GiB est configurée

Commande (m pour l'aide) : p 

Disque /dev/sdb : 21.5 Go, 21474836480 octets, 41943040 secteurs
Unités = secteur de 1 × 512 = 512 octets
Taille de secteur (logique / physique) : 512 octets / 512 octets
taille d'E/S (minimale / optimale) : 512 octets / 512 octets
Type d'étiquette de disque : dos
Identifiant de disque : 0xf858f73b

Périphérique Amorçage  Début         Fin      Blocs    Id. Système
/dev/sdb1            2048    10487807     5242880   83  Linux
/dev/sdb2        10487808    41943039    15727616    5  Extended
/dev/sdb5        10489856    16781311     3145728   83  Linux

Commande (m pour l'aide) : w
La table de partitions a été altérée.

Appel d'ioctl() pour relire la table de partitions.
Synchronisation des disques.
</code></pre>

<h2 id="lvm">LVM</h2>

<h3 id="declare-physical-volumes">Declare physical volumes</h3>

<pre><code>[root@centos ~]# pvcreate /dev/sdb
WARNING: dos signature detected on /dev/sdb at offset 510. Wipe it? [y/n]: y
  Wiping dos signature on /dev/sdb.
  Physical volume "/dev/sdb" successfully created.

[root@centos ~]# pvcreate /dev/sdc
  Physical volume "/dev/sdc" successfully created.
[root@centos ~]# vgcreate vg01 /dev/sd
sda   sda1  sda2  sdb   sdc   
</code></pre>

<h3 id="create-a-volume-group%3A-%60vg01%60">Create a volume group: <code>vg01</code></h3>

<pre><code>[root@centos ~]# vgcreate vg01 /dev/sdb /dev/sdc
  Volume group "vg01" successfully created

[root@centos ~]# vgdisplay vg01
  --- Volume group ---
  VG Name               vg01
  System ID             
  Format                lvm2
  Metadata Areas        2
  Metadata Sequence No  1
  VG Access             read/write
  VG Status             resizable
  MAX LV                0
  Cur LV                0
  Open LV               0
  Max PV                0
  Cur PV                2
  Act PV                2
  VG Size               39,99 GiB
  PE Size               4,00 MiB
  Total PE              10238
  Alloc PE / Size       0 / 0   
  Free  PE / Size       10238 / 39,99 GiB
  VG UUID               LoVhMG-uCtl-jw9H-LjCv-k5zh-jjoO-50w0S7
</code></pre>

<h3 id="create-logical-volumes">Create logical volumes</h3>

<pre><code>[root@centos ~]# lvcreate -n lv01 -L 5Go /dev/vg01
  Logical volume "lv01" created.

[root@centos ~]# lvcreate -n lv02 -L 15Go /dev/vg01
  Logical volume "lv02" created.

[root@centos ~]# lvcreate -n lv03 -L 8Go /dev/vg01
  Logical volume "lv03" created.
</code></pre>

<p><img src="/images/centos-course/gparted-lvm.png" alt="screenshot" /></p>

<p><img src="/images/centos-course/partition-extended.png" alt="screenshot" /></p>

<h3 id="ext4-formating-of-logical-volumes">Ext4 formating of logical volumes</h3>

<pre><code>root@centos ~]# mkfs -t ext4 /dev/vg01/lv01
mke2fs 1.42.9 (28-Dec-2013)
Étiquette de système de fichiers=
Type de système d'exploitation : Linux
Taille de bloc=4096 (log=2)
Taille de fragment=4096 (log=2)
« Stride » = 0 blocs, « Stripe width » = 0 blocs
327680 i-noeuds, 1310720 blocs
65536 blocs (5.00%) réservés pour le super utilisateur
Premier bloc de données=0
Nombre maximum de blocs du système de fichiers=1342177280
40 groupes de blocs
32768 blocs par groupe, 32768 fragments par groupe
8192 i-noeuds par groupe
Superblocs de secours stockés sur les blocs : 
    32768, 98304, 163840, 229376, 294912, 819200, 884736

Allocation des tables de groupe : complété                        
Écriture des tables d'i-noeuds : complété                        
Création du journal (32768 blocs) : complété
Écriture des superblocs et de l'information de comptabilité du système de
fichiers : complété

[root@centos ~]# mkfs -t ext4 /dev/vg01/lv02
[root@centos ~]# mkfs -t ext4 /dev/vg01/lv03
</code></pre>

<h3 id="create-mount-points">Create mount points</h3>

<pre><code>[root@centos mnt]# mkdir -p /mnt/volume1 /mnt/volume2 /mnt/volume3
[root@centos mnt]# mount -t ext4 /dev/vg01/lv01 /mnt/volume1/
[root@centos mnt]# mount -t ext4 /dev/vg01/lv02 /mnt/volume2/
[root@centos mnt]# mount -t ext4 /dev/vg01/lv03 /mnt/volume3/
[root@centos mnt]# touch /mnt/volume1/foo
</code></pre>

<h3 id="add-permanent-mount-point-in-%60%2Fetc%2Ffstab%60">Add permanent mount point in <code>/etc/fstab</code></h3>

<p>vim /etc/fstab</p>

<pre><code>/dev/vg01/lv01 /mnt/volume1                     ext4    defaults        0 0
/dev/vg01/lv02 /mnt/volume2                     ext4    defaults        0 0
/dev/vg01/lv03 /mnt/volume3                     ext4    defaults        0 0
reboot
df -h
/dev/mapper/vg01-lv02      15G     41M   14G   1% /mnt/volume2
/dev/mapper/vg01-lv03     7,8G     36M  7,3G   1% /mnt/volume3
/dev/mapper/vg01-lv01     4,8G     20M  4,6G   1% /mnt/volume1
</code></pre>

<h2 id="copy-a-full-hard-drive">Copy a full hard drive</h2>

<pre><code>[root@centos]# dd if=/dev/vg01/lv01 of=/dev/vg01/lv02
10485760+0 enregistrements lus
10485760+0 enregistrements écrits
5368709120 octets (5,4 GB) copiés, 102,314 s, 52,5 MB/s
</code></pre>

<h2 id="dump-%2F-restore">Dump / restore</h2>

<pre><code>ls /mnt/volume4
umount /mnt/volume4
dump -0f /tmp/vol4.dump /dev/vg01/lv04

mount -t ext4 /dev/vg01/lv04 /mnt/volume4
rm -rf /mnt/volume4/*

cd /mnt/volume4
restore -rf /tmp/vol4.dump 
ls
</code></pre>

<h2 id="change-root-password">change root password</h2>

<pre><code>When starting the machine, interrupt the countdown by pressing any key
With the cursor on the start line
Hit "e" to edit the entry
Position on the line &lt;br&gt; by "linux16"
Move to the end of the line and add: rd.break
Hit Ctrl x to start the system with the modified configuration
When the "switch_root: / #" prompt appears, issue the following commands:
switch_root: / # mount -oremount, rw / sysroot
switch_root: / # chroot / sysroot

Change the root password:
# echo newmdp | passwd - root -stdin
or # passwd root
Editing the / etc / shadow file in out of context SELinux requires a full reboot of the system at the next reboot. To do this, enter the following command: # touch /.autorelabel
Hit the "exit" command twice, once to exit the chroot and a second time to the system.
When restarting the machine, the new operational password.
</code></pre>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Openstack: resize volume and partition size on a running instance]]></title>
            <link href="/blog/2019/02/20/openstack-resize-volume"/>
            <updated>2019-02-20T00:00:00+00:00</updated>
            <id>/blog/2019/02/20/openstack-resize-volume</id>
            <content type="html"><![CDATA[<h2 id="context">Context</h2>

<p>This post deals with how to increase a volume attached to a server instance on openstack. <a href="https://docs.openstack.org/cinder/rocky/cli/cli-manage-volumes.html#">See openstack volume ressource</a>.</p>

<h2 id="test-database">Test database</h2>

<p>To test everything goes well, a test database is setup:</p>

<pre><code>sudo -u postgres
sudo -u postgres psql -c "create database webapp";
sudo -u postgres psql -d webapp -c "CREATE TABLE account(user_id serial PRIMARY KEY,username VARCHAR (50) UNIQUE NOT NULL,created_on TIMESTAMP NOT NULL);" ;
sudo -u postgres psql -d webapp -c "INSERT INTO account (username,created_on ) VALUES ('foo','2019-01-01') ;" ;
sudo -u postgres psql -d webapp -c "INSERT INTO account (username,created_on ) VALUES ('bar','2019-01-02') ;" ;
</code></pre>

<p>Check command:</p>

<pre><code>sudo -u postgres psql -d webapp -c "SELECT * FROM account" ;
</code></pre>

<p>returns:</p>

<pre><code> user_id | username |     created_on      
---------+----------+---------------------
       1 | foo      | 2019-01-01 00:00:00
       2 | bar      | 2019-01-02 00:00:00
(2 rows)
</code></pre>

<h2 id="switch-off-automatic-volume-mount-in-%60%2Fetc%2Ffstab-%60">Switch off automatic volume mount in <code>/etc/fstab</code></h2>

<pre><code>ssh demo
</code></pre>

<p>Comment lines in <code>/etc/fstab</code> that concern the volume you want to increase:</p>

<pre><code>sudo vim /etc/fstab 

#/dev/vdb1 /data ext4 defaults 0 0
#/data/pgsql /var/lib/postgresql none bind 0 0

sudo reboot
</code></pre>

<h2 id="check">Check</h2>

<pre><code>ssh demo
</code></pre>

<p>Check that they are no more mount point that depend on the volume we are going to manipulate.</p>

<pre><code>df -h
Filesystem      Size  Used Avail Use% Mounted on
udev            992M     0  992M   0% /dev
tmpfs           201M  4,5M  197M   3% /run
/dev/vda1       4,9G  1,9G  2,9G  40% /
tmpfs          1003M  8,0K 1003M   1% /dev/shm
tmpfs           5,0M     0  5,0M   0% /run/lock
tmpfs          1003M     0 1003M   0% /sys/fs/cgroup
</code></pre>

<h2 id="stop-your-applications-if-needed">Stop your applications if needed</h2>

<pre><code>sudo service apache2 stop
sudo service postgresql stop
</code></pre>

<h2 id="increase-our-volume-size">Increase our volume size</h2>

<p>identify your target server and target volume with <code>openstack volume list</code> and <code>openstack server list</code></p>

<pre><code>TARGET_SERVER=ed864066-ed73-46e0-b551-5bfca9873af6
TARGET_VOLUME=1be3646a-3bb5-40fc-b9eb-6ab803b60d2c
VOLUME_SIZE=25
</code></pre>

<h2 id="detach-volume-from-server">Detach volume from server</h2>

<pre><code>openstack server remove volume $TARGET_SERVER $TARGET_VOLUME
</code></pre>

<p><em>At this point, the device should NOT be visible when you execute: <code>ls -l /dev/vd*</code></em>.</p>

<h2 id="increase-volume-size">Increase volume size</h2>

<pre><code>openstack volume set $TARGET_VOLUME --size $VOLUME_SIZE
</code></pre>

<h2 id="attach-volume-to-server">Attach volume to server</h2>

<pre><code>openstack server add volume $TARGET_SERVER $TARGET_VOLUME --device /dev/vdb
</code></pre>

<p><em>At this point, the device should BE visible when you execute: <code>ls -l /dev/vd*</code></em>.</p>

<h2 id="manage-partition-on-your-openstack-server">Manage partition on your openstack server</h2>

<p>Let's configure the partition to use all the volume space.</p>

<pre><code>ssh demo
sudo parted /dev/vdb resizepart 1 100%
sudo e2fsck -f /dev/vdb1
sudo resize2fs /dev/vdb1
</code></pre>

<h2 id="restore-%60%2Fetc%2Ffstab%60">Restore <code>/etc/fstab</code></h2>

<p>uncomment the lines:</p>

<pre><code>/dev/vdb1 /data ext4 defaults 0 0
/data/pgsql /var/lib/postgresql none bind 0 0
</code></pre>

<p>reboot: <code>sudo reboot</code></p>

<h2 id="check-your-fs">Check your fs</h2>

<h3 id="check-volume-size-and-partition-size">Check volume size and partition size</h3>

<pre><code>sudo fdisk -l

Disk /dev/vdb: 25 GiB, 26843545600 bytes, 52428800 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disklabel type: dos
Disk identifier: 0x0e1b27a4

Device     Boot Start      End  Sectors Size Id Type
/dev/vdb1        2048 52428799 52426752  25G 83 Linux
</code></pre>

<h3 id="check-database">Check database</h3>

<p>Use our test command to check our database:</p>

<pre><code>ssh demo
sudo -u postgres psql -d webapp -c "SELECT * FROM account" ;
</code></pre>

<p>check data are ok:</p>

<pre><code> user_id | username |     created_on      
---------+----------+---------------------
       1 | foo      | 2019-01-01 00:00:00
       2 | bar      | 2019-01-02 00:00:00
(2 rows)
</code></pre>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[SSH X11 &amp; docker]]></title>
            <link href="/blog/2019/02/15/ssh-x11-docker"/>
            <updated>2019-02-15T00:00:00+00:00</updated>
            <id>/blog/2019/02/15/ssh-x11-docker</id>
            <content type="html"><![CDATA[<h2 id="purpose">Purpose</h2>

<p>Run GUI application inside a docker container using X11Forwarding.</p>

<p><a href="https://gist.github.com/udkyo/c20935c7577c71d634f0090ef6fa8393">source from github.</a></p>

<h2 id="create-a-container">Create a container</h2>

<h3 id="dockerfile">DockerFile</h3>

<pre><code>FROM ubuntu
RUN apt update \
    &amp;&amp; apt install -y firefox \
                      openssh-server \
                      xauth \
                      emacs \
    &amp;&amp; mkdir /var/run/sshd \
    &amp;&amp; mkdir /root/.ssh \
    &amp;&amp; chmod 700 /root/.ssh \
    &amp;&amp; ssh-keygen -A \
    &amp;&amp; sed -i "s/^.*PasswordAuthentication.*$/PasswordAuthentication no/" /etc/ssh/sshd_config \
    &amp;&amp; sed -i "s/^.*X11Forwarding.*$/X11Forwarding yes/" /etc/ssh/sshd_config \
    &amp;&amp; sed -i "s/^.*X11UseLocalhost.*$/X11UseLocalhost no/" /etc/ssh/sshd_config \
    &amp;&amp; grep "^X11UseLocalhost" /etc/ssh/sshd_config || echo "X11UseLocalhost no" &gt;&gt; /etc/ssh/sshd_config

RUN echo "CONTENT_OF_ID_RSA_PUB_KEY_HERE" &gt;&gt; /root/.ssh/authorized_keys
</code></pre>

<h3 id="build-it">Build it</h3>

<pre><code>docker build -t benit/ubuntu-x11 . --build-arg http_proxy=$http_proxy
</code></pre>

<h2 id="run-container">Run Container</h2>

<pre><code>docker run --name ubuntu-x11 --rm -d -p 2150:22 benit/ubuntu-x11
</code></pre>

<h2 id="ssh-client-configuration">SSH client configuration</h2>

<p>Edit <code>~/.ssh/config</code> on the client, here my workstation is named <code>lxdev</code>:</p>

<pre><code>Host ubuntuX11
     Hostname lxdev
     Port 2150
     user root
     ForwardX11 yes
     ForwardX11Trusted yes
</code></pre>

<h2 id="use-it%21">Use it!</h2>

<pre><code>ssh -X ubuntu-x11 emacs     
</code></pre>

<h2 id="enjoy%21">Enjoy!</h2>

<p><img src="/images/docker/docker-ssh-x11-emacs.png" alt="screenshot" /></p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Linux multiusb live]]></title>
            <link href="/blog/2019/02/15/linux-multiusb-live"/>
            <updated>2019-02-15T00:00:00+00:00</updated>
            <id>/blog/2019/02/15/linux-multiusb-live</id>
            <content type="html"><![CDATA[<h2 id="purpose">Purpose</h2>

<p>This post deals with creating a multi linux iso live usb drive. <a href="https://itsfoss.com/multiple-linux-one-usb/">source</a></p>

<h2 id="procedure">Procedure</h2>

<ul>
<li>format your drive to fat32</li>
<li><a href="https://github.com/mbusb/multibootusb/releases/download/v8.8.0/python3-multibootusb_8.8.0-1_all.deb">download MultiBootUsb</a></li>
<li>install it : <code>dpkg -i python3-multibootusb_8.8.0-1_all.deb</code></li>
<li>check if all python dependencies are satisfied, if not try install missing with <code>sudo apt install python3-pyqt5 p7zip-full python3-pyudev</code></li>
<li>enjoy : you can now burn several iso using the GUI. Great tool!</li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Linux logs]]></title>
            <link href="/blog/2019/02/11/linux-mastering-logs"/>
            <updated>2019-02-11T00:00:00+00:00</updated>
            <id>/blog/2019/02/11/linux-mastering-logs</id>
            <content type="html"><![CDATA[<h2 id="purpose">Purpose</h2>

<p>The aim of is post is to manipulate linux system logs.</p>

<p>Logging is an important part of IT system and must be understand.</p>

<h2 id="test-program">Test program</h2>

<p>The following program named <code>program.sh</code> is used to test log services:</p>

<pre><code>echo I am $(whoami) and up from  $(uptime)
</code></pre>

<h2 id="logs">Logs</h2>

<p>Logs are managed with a service named <code>rsyslog</code></p>

<pre><code>sudo service rsyslog status
</code></pre>

<h2 id="activate-cron-log">Activate cron log</h2>

<p>In <code>sudo vim /etc/rsyslog.conf</code>, uncomment this line:</p>

<pre><code>cron.*                          /var/log/cron.log
</code></pre>

<p>Restart <code>systemctl</code>:</p>

<pre><code>sudo systemctl restart rsyslog
</code></pre>

<p>This doesn't log your program output, but logs your cron information.</p>

<p>Considering the following crontab that runs every minute:</p>

<pre><code>* * * * * /home/debian/prog.sh
</code></pre>

<p>Let's check <code>cron.log</code> details:</p>

<pre><code>sudo tail -f /var/log/cron.log

Feb 11 10:09:01 sandbox CRON[25182]: (root) CMD (  [ -x /usr/lib/php/sessionclean ] &amp;&amp; if [ ! -d /run/systemd/system ]; then /usr/lib/php/sessionclean; fi)
Feb 11 10:09:01 sandbox CRON[25183]: (debian) CMD (/home/debian/prog.sh)
Feb 11 10:10:01 sandbox CRON[25243]: (debian) CMD (/home/debian/prog.sh)
Feb 11 10:11:01 sandbox CRON[25373]: (debian) CMD (/home/debian/prog.sh)
Feb 11 10:12:01 sandbox CRON[25396]: (debian) CMD (/home/debian/prog.sh)
Feb 11 10:13:01 sandbox CRON[25405]: (debian) CMD (/home/debian/prog.sh)
Feb 11 10:14:01 sandbox CRON[25415]: (debian) CMD (/home/debian/prog.sh)
Feb 11 10:15:01 sandbox CRON[25439]: (root) CMD (command -v debian-sa1 &gt; /dev/null &amp;&amp; debian-sa1 1 1)
Feb 11 10:15:01 sandbox CRON[25441]: (debian) CMD (/home/debian/prog.sh)
Feb 11 10:16:02 sandbox CRON[25459]: (debian) CMD (/home/debian/prog.sh)
</code></pre>

<h2 id="log-rotation">Log rotation</h2>

<p>Log rotation is managed with a service named <code>logrotate</code></p>

<pre><code>cat /var/lib/logrotate/status | grep apache

"/var/log/apache2/access.log" 2019-2-8-6:25:2
"/var/log/apache2/other_vhosts_access.log" 2018-5-29-6:0:0
"/var/log/apache2/error.log" 2019-2-11-6:25:1
</code></pre>

<p>Let's check apache2 webserver log rotation configuration :</p>

<pre><code>cat /etc/logrotate.d/apache2 
/var/log/apache2/*.log {
    daily
    missingok
    rotate 14
    compress
    delaycompress
    notifempty
    create 640 root adm
    sharedscripts
    postrotate
            if /etc/init.d/apache2 status &gt; /dev/null ; then \
                /etc/init.d/apache2 reload &gt; /dev/null; \
            fi;
    endscript
    prerotate
        if [ -d /etc/logrotate.d/httpd-prerotate ]; then \
            run-parts /etc/logrotate.d/httpd-prerotate; \
        fi; \
    endscript
}
</code></pre>

<h2 id="example-with-%60program.sh%60">Example with <code>program.sh</code></h2>

<h3 id="program-log-location">Program log location</h3>

<p>We will tell our program to write here: <code>/var/log/prog.sh/log</code>. Let's create this file with the right permissions:</p>

<pre><code>sudo mkdir /var/log/prog.sh/
sudo touch /var/log/prog.sh/log
sudo chmod ugo+rw /var/log/prog.sh/log
</code></pre>

<h3 id="program-crontab">Program crontab</h3>

<pre><code>* * * * * /home/debian/prog.sh &gt;&gt; /var/log/prog.sh/log
</code></pre>

<h3 id="program-log-rotation">Program log rotation</h3>

<p>Edit <code>/etc/logrotate.d/program.sh</code> :</p>

<pre><code>/var/log/program.sh/*.log {
        daily
        missingok
        rotate 5
        compress
        delaycompress
        notifempty
        create 644 root root
}
</code></pre>

<p><a href="https://doc.ubuntu-fr.org/logrotate#exemple">Great doc here</a>.</p>

<h3 id="check-log-rotation">Check log rotation</h3>

<pre><code>ls /var/log/prog.sh/
</code></pre>

<h2 id="another-example-with-a-cronjob-from-a-webapp-named-%60moodle%60">Another example with a cronjob from a webapp named <code>moodle</code></h2>

<h3 id="moodle-log-location">Moodle log location</h3>

<pre><code>sudo mkdir /var/log/moodle
sudo touch /var/log/moodle/cron.log
sudo chmod -R ug+rw /var/log/moodle/
</code></pre>

<h3 id="moodle-crontab">Moodle crontab</h3>

<p>This job must be run from <code>www-data</code> user, so we need the crontab too to be run from <code>www-data</code> user:</p>

<pre><code>sudo crontab -u www-data -e
</code></pre>

<p>edit as follow:</p>

<pre><code>#run moodle cron every hour
0 * * * * php /data/moodle/admin/cli/cron.php &gt;&gt; /var/log/moodle/cron.log 2&gt;&amp;1
</code></pre>

<p><strong>Important stderr has been redirected to stdout with <code>2&amp;1</code></strong> and all that is printed in a file.</p>

<h3 id="moodle-log-rotation">Moodle log rotation</h3>

<p>Edit <code>/etc/logrotate.d/moodle</code> :</p>

<pre><code>/var/log/moodle/*.log {
        daily
        missingok
        rotate 5
        compress
        delaycompress
        notifempty
        create 640 www-data www-data
}    
</code></pre>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[How to make a christmas garland with a nginx reverse proxy and 3 apache backends under docker?]]></title>
            <link href="/blog/2019/01/25/docker-make-a-christmas-garland-with-nginx-apache"/>
            <updated>2019-01-25T00:00:00+00:00</updated>
            <id>/blog/2019/01/25/docker-make-a-christmas-garland-with-nginx-apache</id>
            <content type="html"><![CDATA[<h1 id="purpose">Purpose</h1>

<p>This posts deals with doing yourself a christmas garland!</p>

<p>We will be using :</p>

<ul>
<li>nginx as a reverse proxy</li>
<li>apache as a backend</li>
<li>docker as a plateforme  </li>
</ul>

<h1 id="repository">Repository</h1>

<p><a href="https://github.com/benIT/docker-nginx-reverse-proxy">You will find a demonstration repository here.</a></p>

<h1 id="demo">Demo</h1>

<p><center><video width="640" height="480" controls src="https://benit.github.io/docker-nginx-reverse-proxy/demo.mp4"></video></center></p>

<p>If it does not work, download it from github repo:</p>

<pre><code>wget https://raw.githubusercontent.com/benIT/docker-nginx-reverse-proxy/master/demo.mp4
vlc demo.mp4
</code></pre>

<h1 id="conclusion">Conclusion</h1>

<p>Never forget that computing should always be fun!</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Docker 101: docker-compose]]></title>
            <link href="/blog/2019/01/15/docker-docker-compose"/>
            <updated>2019-01-15T00:00:00+00:00</updated>
            <id>/blog/2019/01/15/docker-docker-compose</id>
            <content type="html"><![CDATA[<h1 id="docker-compose">Docker compose</h1>

<p>Purpose: compose is a tool designed to create multi-containers app.</p>

<h2 id="install">Install</h2>

<pre><code>sudo apt install python-pip
pip install docker-compose
</code></pre>

<h2 id="docker-compose.yml">docker-compose.yml</h2>

<p>The magic happens in a file named <code>docker-compose.yml</code></p>

<h2 id="run">Run</h2>

<pre><code>docker-compose up -d
</code></pre>

<h2 id="stop">Stop</h2>

<pre><code>docker-compose down -v
</code></pre>

<h2 id="networking">Networking</h2>

<p><code>docker-compose</code> handles the creation a private network:</p>

<pre><code>Creating network "n-tiers_default" with the default driver
Creating object-cache ... done
Creating pgsql        ... done
Creating web          ... done
</code></pre>

<h1 id="example">Example</h1>

<p>Better than words, take a look at this <a href="https://github.com/benIT/docker-compose-n-tiers">repo that illustrates a classical n-tiers web app</a></p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Docker 101: networking]]></title>
            <link href="/blog/2019/01/14/docker-networking"/>
            <updated>2019-01-14T00:00:00+00:00</updated>
            <id>/blog/2019/01/14/docker-networking</id>
            <content type="html"><![CDATA[<h1 id="docker-running-containers-inside-a-bridge-network">Docker running containers inside a bridge network</h1>

<p>The purpose of this post is to isolate each tiers of our app into different containers.</p>

<p>We will create a private network and run containers inside this private network.</p>

<p><a href="https://docker-curriculum.com/#webapps-with-docker">This article is largely inspired by this great resource.</a></p>

<h2 id="networking">Networking</h2>

<h3 id="create-an-isolated-private-bridge-network">Create an isolated private bridge network</h3>

<pre><code>docker network create web-net    
</code></pre>

<h3 id="inspect-the-private-network">Inspect the private network</h3>

<pre><code>docker network inspect web-net
</code></pre>

<h3 id="run-a-container-inside-the-private-bridge-network-with-%60--net%60-option">Run a container inside the private bridge network with <code>--net</code> option</h3>

<pre><code>docker run --name pgsql-web --rm  -d --net web-net postgres:latest
docker run --name debian-web --rm -p 80:80 --net web-net -d benit/debian-web:latest
</code></pre>

<h3 id="inspect-the-private-network-to-get-ips-of-containers-of-the-private-network">Inspect the private network to get IPs of containers of the private network</h3>

<pre><code>docker network inspect web-net
</code></pre>

<p>gives:</p>

<pre><code> "Containers": {
            "3729ccbb14e514fd6c8b571ed9c985c28293cb5bfdb10c6c233773f50d6ba763": {
                "Name": "debian-web",
                "EndpointID": "c370cab93cdd2ac9f30f568a1709b8c998d2ca36106d5423b484a20aadbff84f",
                "MacAddress": "02:42:ac:12:00:03",
                "IPv4Address": "172.18.0.3/16",
                "IPv6Address": ""
            },
            "61bcf5cd9838c8c2e66beef73a04a2704a3be7e2085a5c6b4ad58bd78f12a138": {
                "Name": "pgsql-web",
                "EndpointID": "128f50ead4974a725c04551cb284fec2c733a48375a4819096b0b623ff2af4ac",
                "MacAddress": "02:42:ac:12:00:02",
                "IPv4Address": "172.18.0.2/16",
                "IPv6Address": ""
            }
        },
</code></pre>

<h2 id="putting-it-all-together">Putting it all together</h2>

<h3 id="let%27s-create-a-database">Let's create a database</h3>

<pre><code>docker container exec pgsql-web psql -U postgres -c "create database webapp";
docker container exec pgsql-web psql -U postgres -d webapp -c "CREATE TABLE account(user_id serial PRIMARY KEY,username VARCHAR (50) UNIQUE NOT NULL,created_on TIMESTAMP NOT NULL);" ;
docker container exec pgsql-web psql -U postgres -d webapp -c "INSERT INTO account (username,created_on ) VALUES ('foo','2019-01-01') ;" ;
docker container exec pgsql-web psql -U postgres -d webapp -c "INSERT INTO account (username,created_on ) VALUES ('bar','2019-01-02') ;" ;
</code></pre>

<h3 id="connect-database-container-from-webserver-container">Connect database container from webserver container</h3>

<pre><code>docker container exec -it debian-web  psql -U postgres -h 172.18.0.2 -d webapp -c "select * from account;" ;
</code></pre>

<p>gives:</p>

<pre><code> user_id | username |     created_on      
---------+----------+---------------------
       1 | foo      | 2019-01-01 00:00:00
       2 | bar      | 2019-01-02 00:00:00
(2 rows)
</code></pre>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Docker 101: Dockerfile]]></title>
            <link href="/blog/2019/01/14/docker-dockerfile"/>
            <updated>2019-01-14T00:00:00+00:00</updated>
            <id>/blog/2019/01/14/docker-dockerfile</id>
            <content type="html"><![CDATA[<h1 id="dockerfile">Dockerfile</h1>

<p>A <code>Dockerfile</code> is a text document that contains all the commands a user could call on the command line to assemble an image.</p>

<h2 id="example">Example</h2>

<p>You will find <a href="https://github.com/benIT/debian-web">in this repo</a> a running <code>Dockerfile</code>  based on a debian image that runs an Apache webserver.</p>

<p>You will find <a href="https://github.com/benIT/debian-web/blob/master/README.md">in this file</a> all the base commands to manage a <code>Dockerfile</code> .</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Install Docker on ubuntu 16.04]]></title>
            <link href="/blog/2019/01/10/docker-installation"/>
            <updated>2019-01-10T00:00:00+00:00</updated>
            <id>/blog/2019/01/10/docker-installation</id>
            <content type="html"><![CDATA[<h2 id="install-docker-ce-for-ubuntu">Install Docker CE for Ubuntu</h2>

<p>See <a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/">official documentation</a>.</p>

<h2 id="run-docker-as-a-non-root-user">Run docker as a non-root user</h2>

<p>See <a href="https://docs.docker.com/install/linux/linux-postinstall/">official documentation</a>.</p>

<h2 id="configure-docker-to-be-used-behind-a-http-proxy">Configure docker to be used behind a http proxy</h2>

<p>Create the following file <code>/etc/systemd/system/docker.service.d/http-proxy.conf</code> and edit it:</p>

<pre><code>[Service]
Environment=http_proxy=http://user:pass@ip:port
Environment=https_proxy=http://user:pass@ip:port
</code></pre>

<h2 id="test">Test</h2>

<pre><code>docker run hello-world
</code></pre>

<h2 id="install-docker-compose">Install docker-compose</h2>

<p>See <a href="https://docs.docker.com/compose/install/">official documentation</a>.</p>

<p>currently, I use docker-compose <code>v1.23.2</code></p>

<pre><code>sudo curl -L "https://github.com/docker/compose/releases/download/1.23.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose
docker-compose --version
</code></pre>
]]></content>
        </entry>
    </feed>