<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[benIT&#039;s notebook]]></title>
    <link href="/blog/categories/linux.xml" rel="self"/>
    <link href="/"/>
    <updated>2019-02-15T13:34:44+00:00</updated>
    <id>/</id>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[Linux multiusb live]]></title>
            <link href="/blog/2019/02/15/linux-multiusb-live"/>
            <updated>2019-02-15T00:00:00+00:00</updated>
            <id>/blog/2019/02/15/linux-multiusb-live</id>
            <content type="html"><![CDATA[<h2 id="purpose">Purpose</h2>

<p>This post deals with creating a multi linux iso live usb drive. <a href="https://itsfoss.com/multiple-linux-one-usb/">source</a></p>

<h2 id="procedure">Procedure</h2>

<ul>
<li>format your drive to fat32</li>
<li><a href="https://github.com/mbusb/multibootusb/releases/download/v8.8.0/python3-multibootusb_8.8.0-1_all.deb">download MultiBootUsb</a></li>
<li>install it : <code>dpkg -i python3-multibootusb_8.8.0-1_all.deb</code></li>
<li>check if all python dependencies are satisfied, if not try install missing with <code>sudo apt install python3-pyqt5 p7zip-full python3-pyudev</code></li>
<li>enjoy : you can now burn several iso using the GUI. Great tool!</li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Linux logs]]></title>
            <link href="/blog/2019/02/11/linux-mastering-logs"/>
            <updated>2019-02-11T00:00:00+00:00</updated>
            <id>/blog/2019/02/11/linux-mastering-logs</id>
            <content type="html"><![CDATA[<h2 id="purpose">Purpose</h2>

<p>The aim of is post is to manipulate linux system logs.</p>

<p>Logging is an important part of IT system and must be understand.</p>

<h2 id="test-program">Test program</h2>

<p>The following program named <code>program.sh</code> is used to test log services:</p>

<pre><code>echo I am $(whoami) and up from  $(uptime)
</code></pre>

<h2 id="logs">Logs</h2>

<p>Logs are managed with a service named <code>rsyslog</code></p>

<pre><code>sudo service rsyslog status
</code></pre>

<h2 id="activate-cron-log">Activate cron log</h2>

<p>In <code>sudo vim /etc/rsyslog.conf</code>, uncomment this line:</p>

<pre><code>cron.*                          /var/log/cron.log
</code></pre>

<p>Restart <code>systemctl</code>:</p>

<pre><code>sudo systemctl restart rsyslog
</code></pre>

<p>This doesn't log your program output, but logs your cron information.</p>

<p>Considering the following crontab that runs every minute:</p>

<pre><code>* * * * * /home/debian/prog.sh
</code></pre>

<p>Let's check <code>cron.log</code> details:</p>

<pre><code>sudo tail -f /var/log/cron.log

Feb 11 10:09:01 sandbox CRON[25182]: (root) CMD (  [ -x /usr/lib/php/sessionclean ] &amp;&amp; if [ ! -d /run/systemd/system ]; then /usr/lib/php/sessionclean; fi)
Feb 11 10:09:01 sandbox CRON[25183]: (debian) CMD (/home/debian/prog.sh)
Feb 11 10:10:01 sandbox CRON[25243]: (debian) CMD (/home/debian/prog.sh)
Feb 11 10:11:01 sandbox CRON[25373]: (debian) CMD (/home/debian/prog.sh)
Feb 11 10:12:01 sandbox CRON[25396]: (debian) CMD (/home/debian/prog.sh)
Feb 11 10:13:01 sandbox CRON[25405]: (debian) CMD (/home/debian/prog.sh)
Feb 11 10:14:01 sandbox CRON[25415]: (debian) CMD (/home/debian/prog.sh)
Feb 11 10:15:01 sandbox CRON[25439]: (root) CMD (command -v debian-sa1 &gt; /dev/null &amp;&amp; debian-sa1 1 1)
Feb 11 10:15:01 sandbox CRON[25441]: (debian) CMD (/home/debian/prog.sh)
Feb 11 10:16:02 sandbox CRON[25459]: (debian) CMD (/home/debian/prog.sh)
</code></pre>

<h2 id="log-rotation">Log rotation</h2>

<p>Log rotation is managed with a service named <code>logrotate</code></p>

<pre><code>cat /var/lib/logrotate/status | grep apache

"/var/log/apache2/access.log" 2019-2-8-6:25:2
"/var/log/apache2/other_vhosts_access.log" 2018-5-29-6:0:0
"/var/log/apache2/error.log" 2019-2-11-6:25:1
</code></pre>

<p>Let's check apache2 webserver log rotation configuration :</p>

<pre><code>cat /etc/logrotate.d/apache2 
/var/log/apache2/*.log {
    daily
    missingok
    rotate 14
    compress
    delaycompress
    notifempty
    create 640 root adm
    sharedscripts
    postrotate
            if /etc/init.d/apache2 status &gt; /dev/null ; then \
                /etc/init.d/apache2 reload &gt; /dev/null; \
            fi;
    endscript
    prerotate
        if [ -d /etc/logrotate.d/httpd-prerotate ]; then \
            run-parts /etc/logrotate.d/httpd-prerotate; \
        fi; \
    endscript
}
</code></pre>

<h2 id="example-with-%60program.sh%60">Example with <code>program.sh</code></h2>

<h3 id="program-log-location">Program log location</h3>

<p>We will tell our program to write here: <code>/var/log/prog.sh/log</code>. Let's create this file with the right permissions:</p>

<pre><code>sudo mkdir /var/log/prog.sh/
sudo touch /var/log/prog.sh/log
sudo chmod ugo+rw /var/log/prog.sh/log
</code></pre>

<h3 id="program-crontab">Program crontab</h3>

<pre><code>* * * * * /home/debian/prog.sh &gt;&gt; /var/log/prog.sh/log
</code></pre>

<h3 id="program-log-rotation">Program log rotation</h3>

<p>Edit <code>/etc/logrotate.d/program.sh</code> :</p>

<pre><code>/var/log/program.sh/*.log {
        daily
        missingok
        rotate 5
        compress
        delaycompress
        notifempty
        create 644 root root
}
</code></pre>

<p><a href="https://doc.ubuntu-fr.org/logrotate#exemple">Great doc here</a>.</p>

<h3 id="check-log-rotation">Check log rotation</h3>

<pre><code>ls /var/log/prog.sh/
</code></pre>

<h2 id="another-example-with-a-cronjob-from-a-webapp-named-%60moodle%60">Another example with a cronjob from a webapp named <code>moodle</code></h2>

<h3 id="moodle-log-location">Moodle log location</h3>

<pre><code>sudo mkdir /var/log/moodle
sudo touch /var/log/moodle/cron.log
sudo chmod -R ug+rw /var/log/moodle/
</code></pre>

<h3 id="moodle-crontab">Moodle crontab</h3>

<p>This job must be run from <code>www-data</code> user, so we need the crontab too to be run from <code>www-data</code> user:</p>

<pre><code>sudo crontab -u www-data -e
</code></pre>

<p>edit as follow:</p>

<pre><code>#run moodle cron every hour
0 * * * * php /data/moodle/admin/cli/cron.php &gt;&gt; /var/log/moodle/cron.log 2&gt;&amp;1
</code></pre>

<p><strong>Important stderr has been redirected to stdout with <code>2&amp;1</code></strong> and all that is printed in a file.</p>

<h3 id="moodle-log-rotation">Moodle log rotation</h3>

<p>Edit <code>/etc/logrotate.d/moodle</code> :</p>

<pre><code>/var/log/moodle/*.log {
        daily
        missingok
        rotate 5
        compress
        delaycompress
        notifempty
        create 640 www-data www-data
}    
</code></pre>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[How to make a christmas garland with a nginx reverse proxy and 3 apache backends under docker?]]></title>
            <link href="/blog/2019/01/25/docker-make-a-christmas-garland-with-nginx-apache"/>
            <updated>2019-01-25T00:00:00+00:00</updated>
            <id>/blog/2019/01/25/docker-make-a-christmas-garland-with-nginx-apache</id>
            <content type="html"><![CDATA[<h1 id="purpose">Purpose</h1>

<p>This posts deals with doing yourself a christmas garland!</p>

<p>We will be using :</p>

<ul>
<li>nginx as a reverse proxy</li>
<li>apache as a backend</li>
<li>docker as a plateforme  </li>
</ul>

<h1 id="repository">Repository</h1>

<p><a href="https://github.com/benIT/docker-nginx-reverse-proxy">You will find a demonstration repository here.</a></p>

<h1 id="demo">Demo</h1>

<p><a href="/video/docker-christmas-garland-demo.mp4">A video is available here.</a></p>

<p>If it does not work, download it from github repo:</p>

<pre><code>wget https://raw.githubusercontent.com/benIT/docker-nginx-reverse-proxy/master/demo.mp4
vlc demo.mp4
</code></pre>

<h1 id="conclusion">Conclusion</h1>

<p>Never forget that computing should always be fun!</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Docker 101: docker-compose]]></title>
            <link href="/blog/2019/01/15/docker-docker-compose"/>
            <updated>2019-01-15T00:00:00+00:00</updated>
            <id>/blog/2019/01/15/docker-docker-compose</id>
            <content type="html"><![CDATA[<h1 id="docker-compose">Docker compose</h1>

<p>Purpose: compose is a tool designed to create multi-containers app.</p>

<h2 id="install">Install</h2>

<pre><code>sudo apt install python-pip
pip install docker-compose
</code></pre>

<h2 id="docker-compose.yml">docker-compose.yml</h2>

<p>The magic happens in a file named <code>docker-compose.yml</code></p>

<h2 id="run">Run</h2>

<pre><code>docker-compose up -d
</code></pre>

<h2 id="stop">Stop</h2>

<pre><code>docker-compose down -v
</code></pre>

<h2 id="networking">Networking</h2>

<p><code>docker-compose</code> handles the creation a private network:</p>

<pre><code>Creating network "n-tiers_default" with the default driver
Creating object-cache ... done
Creating pgsql        ... done
Creating web          ... done
</code></pre>

<h1 id="example">Example</h1>

<p>Better than words, take a look at this <a href="https://github.com/benIT/docker-compose-n-tiers">repo that illustrates a classical n-tiers web app</a></p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Docker 101: networking]]></title>
            <link href="/blog/2019/01/14/docker-networking"/>
            <updated>2019-01-14T00:00:00+00:00</updated>
            <id>/blog/2019/01/14/docker-networking</id>
            <content type="html"><![CDATA[<h1 id="docker-running-containers-inside-a-bridge-network">Docker running containers inside a bridge network</h1>

<p>The purpose of this post is to isolate each tiers of our app into different containers.</p>

<p>We will create a private network and run containers inside this private network.</p>

<p><a href="https://docker-curriculum.com/#webapps-with-docker">This article is largely inspired by this great resource.</a></p>

<h2 id="networking">Networking</h2>

<h3 id="create-an-isolated-private-bridge-network">Create an isolated private bridge network</h3>

<pre><code>docker network create web-net    
</code></pre>

<h3 id="inspect-the-private-network">Inspect the private network</h3>

<pre><code>docker network inspect web-net
</code></pre>

<h3 id="run-a-container-inside-the-private-bridge-network-with-%60--net%60-option">Run a container inside the private bridge network with <code>--net</code> option</h3>

<pre><code>docker run --name pgsql-web --rm  -d --net web-net postgres:latest
docker run --name debian-web --rm -p 80:80 --net web-net -d benit/debian-web:latest
</code></pre>

<h3 id="inspect-the-private-network-to-get-ips-of-containers-of-the-private-network">Inspect the private network to get IPs of containers of the private network</h3>

<pre><code>docker network inspect web-net
</code></pre>

<p>gives:</p>

<pre><code> "Containers": {
            "3729ccbb14e514fd6c8b571ed9c985c28293cb5bfdb10c6c233773f50d6ba763": {
                "Name": "debian-web",
                "EndpointID": "c370cab93cdd2ac9f30f568a1709b8c998d2ca36106d5423b484a20aadbff84f",
                "MacAddress": "02:42:ac:12:00:03",
                "IPv4Address": "172.18.0.3/16",
                "IPv6Address": ""
            },
            "61bcf5cd9838c8c2e66beef73a04a2704a3be7e2085a5c6b4ad58bd78f12a138": {
                "Name": "pgsql-web",
                "EndpointID": "128f50ead4974a725c04551cb284fec2c733a48375a4819096b0b623ff2af4ac",
                "MacAddress": "02:42:ac:12:00:02",
                "IPv4Address": "172.18.0.2/16",
                "IPv6Address": ""
            }
        },
</code></pre>

<h2 id="putting-it-all-together">Putting it all together</h2>

<h3 id="let%27s-create-a-database">Let's create a database</h3>

<pre><code>docker container exec pgsql-web psql -U postgres -c "create database webapp";
docker container exec pgsql-web psql -U postgres -d webapp -c "CREATE TABLE account(user_id serial PRIMARY KEY,username VARCHAR (50) UNIQUE NOT NULL,created_on TIMESTAMP NOT NULL);" ;
docker container exec pgsql-web psql -U postgres -d webapp -c "INSERT INTO account (username,created_on ) VALUES ('foo','2019-01-01') ;" ;
docker container exec pgsql-web psql -U postgres -d webapp -c "INSERT INTO account (username,created_on ) VALUES ('bar','2019-01-02') ;" ;
</code></pre>

<h3 id="connect-database-container-from-webserver-container">Connect database container from webserver container</h3>

<pre><code>docker container exec -it debian-web  psql -U postgres -h 172.18.0.2 -d webapp -c "select * from account;" ;
</code></pre>

<p>gives:</p>

<pre><code> user_id | username |     created_on      
---------+----------+---------------------
       1 | foo      | 2019-01-01 00:00:00
       2 | bar      | 2019-01-02 00:00:00
(2 rows)
</code></pre>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Docker 101: Dockerfile]]></title>
            <link href="/blog/2019/01/14/docker-dockerfile"/>
            <updated>2019-01-14T00:00:00+00:00</updated>
            <id>/blog/2019/01/14/docker-dockerfile</id>
            <content type="html"><![CDATA[<h1 id="dockerfile">Dockerfile</h1>

<p>A <code>Dockerfile</code> is a text document that contains all the commands a user could call on the command line to assemble an image.</p>

<h2 id="example">Example</h2>

<p>You will find <a href="https://github.com/benIT/debian-web">in this repo</a> a running <code>Dockerfile</code>  based on a debian image that runs an Apache webserver.</p>

<p>You will find <a href="https://github.com/benIT/debian-web/blob/master/README.md">in this file</a> all the base commands to manage a <code>Dockerfile</code> .</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Docker 101:  basics]]></title>
            <link href="/blog/2017/12/08/docker-basics"/>
            <updated>2017-12-08T00:00:00+00:00</updated>
            <id>/blog/2017/12/08/docker-basics</id>
            <content type="html"><![CDATA[<h2 id="containers">Containers</h2>

<p>A container is a way to create isolated env that can run code while sharing a single OS.</p>

<h3 id="run-a-container">Run a container</h3>

<pre><code>docker container run -p 9999:80 httpd:2.4
</code></pre>

<p>The <code>--detach</code> flag can be used to run the container in background:</p>

<pre><code>docker container run --detach -p 9999:80 httpd:2.4
</code></pre>

<h3 id="list-containers">List containers</h3>

<pre><code>docker container ls
</code></pre>

<h3 id="run-commands-on-container">Run commands on container</h3>

<pre><code>docker container exec my_container_name du -mh
</code></pre>

<h3 id="attaching-a-shell-to-a-container">Attaching a Shell to a Container</h3>

<p>To get a shell inside the container:</p>

<pre><code>docker container exec -it my_container_name /bin/bash

PATH=$PATH:/usr/games/
export PATH
</code></pre>

<h2 id="dockerfiles">Dockerfiles</h2>

<p>Dockerfile -> create an image -> to generate a container</p>

<p>Inside a file named <code>Dockerfile</code>.</p>

<h3 id="dockerfile-example">Dockerfile example</h3>

<pre><code>FROM httpd:2.4
EXPOSE 80
RUN apt-get update &amp;&amp; apt-get install -y fortunes
COPY page.html /var/www/html/
LABEL maintainer="moby-dock@example.com"
</code></pre>

<h3 id="building-an-image-from-a-dockerfile">Building an Image From a Dockerfile</h3>

<pre><code>docker image build --tag web-server:1.0 .
</code></pre>

<p>End the command with a single . so it knows to look for the Dockerfile in the same folder that the command is run in.</p>

<pre><code>docker image ls


docker container run -p 80:80 web-server:1.0
</code></pre>

<h2 id="volumes">Volumes</h2>

<p>It is possible to copy files into a container but files will be lost when container stops.</p>

<pre><code>docker container cp page.html my_container_name:/var/www/html/.
</code></pre>

<p>A better solution is to use volumes.
Data volumes expose files on your host machine to the container.</p>

<h3 id="creating-a-volume">Creating a Volume</h3>

<pre><code>docker run -d -p 80:80 -v /my-files:/var/www/html web-server:1.1
</code></pre>

<p>Shared folder  between <code>/my-files</code> on host machine and the <code>html</code> folder in the container</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Debian:  fixing error: &#039;A start job is running for dev-disk-...&#039;]]></title>
            <link href="/blog/2017/11/13/debian-fixing-error-after-partition-edition"/>
            <updated>2017-11-13T00:00:00+00:00</updated>
            <id>/blog/2017/11/13/debian-fixing-error-after-partition-edition</id>
            <content type="html"><![CDATA[<h2 id="error-encountered">Error encountered</h2>

<p>After editing partitions to enlarge my vagrant box. The following error is encountered and the machine took 1min30 to boot:</p>

<pre><code>A start job is running for dev-disk-by\x2duuid
</code></pre>

<h2 id="solution">Solution</h2>

<h3 id="list-machine-partition-by-uuid">List machine partition by-uuid</h3>

<pre><code>vagrant@moodle-prod:~$ ls -l /dev/disk/by-uuid/
total 0
lrwxrwxrwx 1 root root 10 Nov 13 08:49 a01bd0bf-1ffc-400d-b383-d74354750926 -&gt; ../../sda2
lrwxrwxrwx 1 root root 10 Nov 13 08:49 db36bd9a-c8f7-4b02-bb1a-81e4913a21d7 -&gt; ../../sda1
</code></pre>

<h3 id="check-%60%2Fetc%2Ffstab%60-file">Check <code>/etc/fstab</code> file</h3>

<pre><code>vagrant@moodle-prod:~$ sudo cat /etc/fstab
# /etc/fstab: static file system information.
#
# Use 'blkid' to print the universally unique identifier for a
# device; this may be used with UUID= as a more robust way to name devices
# that works even if disks are added and removed. See fstab(5).
#
# &lt;file system&gt; &lt;mount point&gt;   &lt;type&gt;  &lt;options&gt;       &lt;dump&gt;  &lt;pass&gt;
# / was on /dev/vda1 during installation
UUID=db36bd9a-c8f7-4b02-bb1a-81e4913a21d7 /               ext4    errors=remount-ro 0       1
# swap was on /dev/vda5 during installation
UUID=8d7d9300-7fd3-4a5a-bfd1-9bc61a20fabd none            swap    sw              0       0
/dev/sr0        /media/cdrom0   udf,iso9660 user,noauto     0       0
</code></pre>

<h3 id="swap-uuid-has-changed">SWAP UUID has changed</h3>

<p>Problem: SWAP UID has changed</p>

<pre><code># swap was on /dev/vda5 during installation
UUID=8d7d9300-7fd3-4a5a-bfd1-9bc61a20fabd none            swap    sw     
</code></pre>

<p>Edit this line with the new UUID (change '8d7d9300-7fd3-4a5a-bfd1-9bc61a20fabd' to 'a01bd0bf-1ffc-400d-b383-d74354750926') in <code>/etc/fstab</code>:</p>

<pre><code>UUID=a01bd0bf-1ffc-400d-b383-d74354750926 none            swap    sw              0       0
</code></pre>

<h2 id="check">Check</h2>

<p>Everything is now fine! Error solved!</p>

<p><a href="https://www.debian-fr.org/t/demarrage-a-start-job-is-running-for-dev-disk-by-x2duuid/64527">source</a></p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Install a nextcloud box with NextCloudPi]]></title>
            <link href="/blog/2017/06/14/install-a-nextcloudbox"/>
            <updated>2017-06-14T00:00:00+00:00</updated>
            <id>/blog/2017/06/14/install-a-nextcloudbox</id>
            <content type="html"><![CDATA[<p>Here is exposed steps to setup a nextcloud box on RPI <a href="https://ownyourbits.com/2017/02/13/nextcloud-ready-raspberry-pi-image/">consuming the nextCloudPi image</a> . enjoy ;)</p>

<h2 id="nextcloudbox-setup">Nextcloudbox setup</h2>

<ul>
<li><p><a href="/blog/2017/06/12/create-a-debian-iso-live-usb-drive">burn a usb drive</a>. <a href="https://ownyourbits.com/2017/02/13/nextcloud-ready-raspberry-pi-image/">NextCloudPi</a> offers a fully configured box.</p></li>
<li><p>insert sd card and boot. Default credentials are: <code>pi</code>/<code>raspberry</code></p></li>
<li><p><a href="https://raspberrypi.stackexchange.com/questions/10060/raspbian-keyboard-layout">change keyboard layout</a> if needed before getting crazy:</p>

<ul>
<li><p>edit the <code>XKBLAYOUT="fr"</code> directive in <code>/etc/default/keyboard</code>:</p></li>
<li><p>reboot: <code>sudo reboot now</code></p></li>
</ul></li>
<li><p>enable usb device automount:</p>

<pre><code>sudo nextcloudpi-config
</code></pre>

<p>then: <code>nc-automount</code> > <code>active=yes</code></p></li>
</ul>

<p>Wait a few seconds and check your drive is mounted using:</p>

<pre><code>    sudo fdisk -l
</code></pre>

<h2 id="test-it%21">Test it!</h2>

<h3 id="locally">Locally</h3>

<ul>
<li>In order to test it you can <a href="/blog/2017/06/15/connect-to-raspberry-over-ethernet">take a look about connecting to pi over ethernet</a>. <em>That's pretty nice to connect to RPI with a simple ethernet cable.</em></li>
</ul>

<h3 id="behind-a-router%2Finternet-connection">Behind a router/internet connection</h3>

<ul>
<li><p>Plug RPI to your router</p></li>
<li><p>Go to the admin panel</p></li>
<li><p>Perform port redirection to the RPI: external 443/internal 443.</p></li>
</ul>

<h3 id="it-works%2C-yeah%21-beer-time%21">It works, yeah! beer time!</h3>

<p>Enter the RPI @IP in your web browser (<code>https://10.42.0.100</code> in my case), after adding a security exception because of self signed certificate, you should see:</p>

<p><img src="/images/nextcloud/nextcloud-login.png" alt="screenshot" /></p>

<p><em>credentials: admin/ownyourbits</em></p>

<h2 id="external-storage-setup">External storage setup</h2>

<ul>
<li><p>format your usb-drive as <code>ext4</code> and create a <code>msdos</code> partition table if necessary using gparted. The partition must be a linux partition kind to support linux right management.</p></li>
<li><p>change nc-database to the flashdrive: <code>sudo nextcloudpi-config</code> > <code>nc-database</code></p></li>
<li><p>change nc-datadir to the flashdrive using: <code>sudo nextcloudpi-config</code> > <code>nc-datadir</code></p></li>
</ul>

<p>If everything goes well, you should see that data and database are stored in <code>/media/USBdrive/ncdata</code> and <code>/media/USBdrive/ncdatabase</code></p>

<h2 id="enable-and-set-up-wifi">Enable and set up WIFI</h2>

<p>You can enable and select your WIFI connection in:
        <code>sudo nextcloudpi-config</code> > <code>nc-wifi</code> > <code>ACTIVE=YES</code></p>

<h2 id="enable-ssh">Enable SSH</h2>

<p>SSH is not enabled by default, enable it in: <code>sudo raspi-config</code> > <code>5 Interfacing Options</code> > <code>P2 SSH</code>
You can now ssh the rpi machine:</p>

<pre><code>    ssh pi@10.42.0.100
</code></pre>

<p>Default rpi credentials are <em>pi/raspberry</em>, CHANGE IT by running: <code>passwd</code></p>

<h2 id="troubleshooting">Troubleshooting</h2>

<h3 id="trusted-domains-issue">Trusted domains issue</h3>

<p>Fix it in editing <code>nexcloud/config/config.php</code>:</p>

<pre><code>    ...
    'trusted_domains' =&gt;
    array(
        ...
        3 =&gt; '10.42.0.100'
    )
    ...
</code></pre>

<p><img src="/images/nextcloud/nextcloud-trusted-domains.png" alt="screenshot" /></p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Connect to raspberry pi from linux host using a simple ethernet cable]]></title>
            <link href="/blog/2017/06/14/connect-to-raspberry-over-ethernet"/>
            <updated>2017-06-14T00:00:00+00:00</updated>
            <id>/blog/2017/06/14/connect-to-raspberry-over-ethernet</id>
            <content type="html"><![CDATA[<p>This post describes how to connect a RPI to a linux station with a simple ethernet cable.</p>

<h2 id="on-debian-host-machine">On debian host machine</h2>

<ul>
<li><p>run <code>gnome-nettool</code>, change the edit the wired connection and edit IPv4 settings.</p>

<ul>
<li><p>Change the <code>DHCP</code> default method 
<img src="/images/rpi/ethernet-connection/wired-dhcp.png" alt="network conf" /></p>

<p>to <code>shared with other computer</code>:
<img src="/images/rpi/ethernet-connection/wired-shared.png" alt="network conf" /></p></li>
</ul></li>
<li><p>power off the RPI</p>

<pre><code>sudo halt
</code></pre></li>
<li><p>mount the RPI SD card to the host PC</p></li>
<li><p>identify the PC eth0 @IP adress:</p>

<pre><code>sudo ifconfig
</code></pre></li>
</ul>

<p>In my case: <code>10.42.0.1</code></p>

<ul>
<li><p>edit the <code>cmdline.txt</code> located on the <code>boot</code> partition file adding:</p>

<pre><code>ip=10.42.0.100
</code></pre></li>
<li><p><em>The pi and the debian PC must on the same subnetwork ie: <code>10.42.0.XXX</code></em></p></li>
<li><p>insert SD card and boot RPI</p></li>
<li><p>check the connectivity:</p>

<pre><code>ping 169.254.6.100
--- 10.42.0.100 ping statistics ---
6 packets transmitted, 6 received, 0% packet loss, time 4999ms
rtt min/avg/max/mdev = 0.326/0.351/0.392/0.028 ms
</code></pre></li>
</ul>

<h2 id="on-the-rpi-machine">On the RPI machine</h2>

<ul>
<li><p>enable ssh:</p>

<pre><code>sudo raspi-config 
</code></pre></li>
<li><p><code>Interfacing Options</code> then <code>P2 SSH</code></p></li>
</ul>

<h2 id="ssh-it-%21">SSH IT !</h2>

<p>From the debian pc:</p>

<pre><code>ssh pi@169.254.6.100
</code></pre>

<p>That was it! You are now connected over SSH on the RPI:</p>

<pre><code>The authenticity of host '10.42.0.100 (10.42.0.100)' can't be established.
ECDSA key fingerprint is ca:cc:0c:80:ab:1a:b4:a9:4b:2b:a8:1a:fa:b4:7e:23.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '10.42.0.100' (ECDSA) to the list of known hosts.
pi@10.42.0.100's password: 



NextCloudPi v0.12.8 is up to date
Last login: Fri May 26 18:34:10 2017

SSH is enabled and the default password for the 'pi' user has not been changed.
This is a security risk - please login as the 'pi' user and type 'passwd' to set a new password.
pi@raspberrypi:~ $
</code></pre>
]]></content>
        </entry>
    </feed>