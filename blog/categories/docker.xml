<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[benIT]]></title>
    <link href="/blog/categories/docker.xml" rel="self"/>
    <link href="/"/>
    <updated>2018-01-11T14:08:18+01:00</updated>
    <id>/</id>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[Docker basics]]></title>
            <link href="/blog/2017/12/08/docker-basics"/>
            <updated>2017-12-08T00:00:00+01:00</updated>
            <id>/blog/2017/12/08/docker-basics</id>
            <content type="html"><![CDATA[<h2 id="containers">Containers</h2>

<p>A container is a way to create isolated env that can run code while sharing a single OS.</p>

<h3 id="run-a-container">Run a container</h3>

<pre><code>docker container run -p 9999:80 httpd:2.4
</code></pre>

<p>The <code>--detach</code> flag can be used to run the container in background:</p>

<pre><code>docker container run --detach -p 9999:80 httpd:2.4
</code></pre>

<h3 id="list-containers">List containers</h3>

<pre><code>docker container ls
</code></pre>

<h3 id="run-commands-on-container">Run commands on container</h3>

<pre><code>docker container exec my_container_name du -mh
</code></pre>

<h3 id="attaching-a-shell-to-a-container">Attaching a Shell to a Container</h3>

<p>To get a shell inside the container:</p>

<pre><code>docker container exec -it my_container_name /bin/bash

PATH=$PATH:/usr/games/
export PATH
</code></pre>

<h2 id="dockerfiles">Dockerfiles</h2>

<p>Dockerfile -> create an image -> to generate a container</p>

<p>Inside a file named <code>Dockerfile</code>.</p>

<h3 id="dockerfile-example">Dockerfile example</h3>

<pre><code>FROM httpd:2.4
EXPOSE 80
RUN apt-get update &amp;&amp; apt-get install -y fortunes
COPY page.html /var/www/html/
LABEL maintainer="moby-dock@example.com"
</code></pre>

<h3 id="building-an-image-from-a-dockerfile">Building an Image From a Dockerfile</h3>

<pre><code>docker image build --tag web-server:1.0 .
</code></pre>

<p>End the command with a single . so it knows to look for the Dockerfile in the same folder that the command is run in.</p>

<pre><code>docker image ls


docker container run -p 80:80 web-server:1.0
</code></pre>

<h2 id="volumes">Volumes</h2>

<p>It is possible to copy files into a container but files will be lost when container stops.</p>

<pre><code>docker container cp page.html my_container_name:/var/www/html/.
</code></pre>

<p>A better solution is to use volumes.
Data volumes expose files on your host machine to the container.</p>

<h3 id="creating-a-volume">Creating a Volume</h3>

<pre><code>docker run -d -p 80:80 -v /my-files:/var/www/html web-server:1.1
</code></pre>

<p>Shared folder  between <code>/my-files</code> on host machine and the <code>html</code> folder in the container</p>
]]></content>
        </entry>
    </feed>