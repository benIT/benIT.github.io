<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[benIT&#039;s notebook]]></title>
    <link href="/blog/categories/dev.xml" rel="self"/>
    <link href="/"/>
    <updated>2019-10-21T14:14:06+00:00</updated>
    <id>/</id>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[PHP survival sheet]]></title>
            <link href="/blog/2019/07/12/php-survival-sheet"/>
            <updated>2019-07-12T00:00:00+00:00</updated>
            <id>/blog/2019/07/12/php-survival-sheet</id>
            <content type="html"><![CDATA[<h2 id="identify-different-%60php.ini%60-files">Identify different <code>php.ini</code> files</h2>

<p>This <code>find</code> command:</p>

<pre><code>find /etc -name php.ini 
</code></pre>

<p>returns:</p>

<pre><code>/etc/php/7.1/apache2/php.ini
/etc/php/7.1/cli/php.ini
</code></pre>

<h2 id="identify-loaded-php.ini-files-from-command-line">Identify loaded php.ini files from command line</h2>

<p>This command:</p>

<pre><code>php --ini
</code></pre>

<p>returns:</p>

<pre><code>Configuration File (php.ini) Path: /etc/php/7.1/cli
Loaded Configuration File:         /etc/php/7.1/cli/php.ini
Scan for additional .ini files in: /etc/php/7.1/cli/conf.d
Additional .ini files parsed:      /etc/php/7.1/cli/conf.d/10-mysqlnd.ini,
/etc/php/7.1/cli/conf.d/10-opcache.ini,
/etc/php/7.1/cli/conf.d/10-pdo.ini,
/etc/php/7.1/cli/conf.d/15-xml.ini,
...
</code></pre>

<h2 id="get-configuration-values-from-the-command-line">Get configuration values from the command line</h2>

<p>This command returns:</p>

<pre><code>php -i | grep upload_max_filesize
</code></pre>

<p>returns:</p>

<pre><code>upload_max_filesize =&gt; 2M =&gt; 2M
</code></pre>

<p>Common configuration to change in <code>php.ini</code> files:</p>

<pre><code>memory_limit
max_execution_time
max_input_time
post_max_size
upload_max_filesize

display_errors
html_errors
</code></pre>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Use your own fork with composer]]></title>
            <link href="/blog/2019/07/10/use-your-own-fork-with-composer"/>
            <updated>2019-07-10T00:00:00+00:00</updated>
            <id>/blog/2019/07/10/use-your-own-fork-with-composer</id>
            <content type="html"><![CDATA[<p>Resources:</p>

<ul>
<li>https://getcomposer.org/doc/04-schema.md#minimum-stability</li>
<li>https://stackoverflow.com/a/13500676/1632809</li>
</ul>

<h2 id="context">Context</h2>

<ul>
<li><p>Original project: <a href="https://github.com/KnpLabs/KnpGaufretteBundle">https://github.com/KnpLabs/KnpGaufretteBundle</a></p></li>
<li><p>My fork: <a href="https://github.com/benIT/KnpGaufretteBundle.git">https://github.com/benIT/KnpGaufretteBundle.git</a></p></li>
<li><p>My branch name: <code>benIT-gaufrette-1.0</code>. This one contains my commits.</p></li>
</ul>

<h2 id="composer">Composer</h2>

<p>My <code>composer.json</code> file that tracks my fork with ly branch.</p>

<p>Note: branch must be prefixed bt <code>dev-</code>. In this case: <code>dev-benIT-gaufrette-1.0</code>:</p>

<pre><code>{
  "name": "root/test-composer",
  "repositories": [
    {
      "type": "vcs",
      "url": "https://github.com/benIT/KnpGaufretteBundle.git"
    }
  ],
  "require": {
    "knplabs/knp-gaufrette-bundle": "dev-benIT-gaufrette-1.0"
  },
  "minimum-stability": "dev",
  "prefer-stable": true
}
</code></pre>

<p>The following directive :</p>

<pre><code>"minimum-stability": "dev",
"prefer-stable": true
</code></pre>

<p>prevents this kind of error related to minimum stability:</p>

<pre><code>  Problem 1
    - Installation request for knplabs/knp-gaufrette-bundle dev-benIT-gaufrette-1.0 -&gt; satisfiable by knplabs/knp-gaufrette-bundle[dev-benIT-gaufrette-1.0].
    - knplabs/knp-gaufrette-bundle dev-benIT-gaufrette-1.0 requires knplabs/gaufrette ^1.0 -&gt; satisfiable by knplabs/gaufrette[1.x-dev] but these conflict with your requirements or minimum-stability.
</code></pre>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Moodle migration procedure]]></title>
            <link href="/blog/2017/06/15/moodle-migration-procedure."/>
            <updated>2017-06-15T00:00:00+00:00</updated>
            <id>/blog/2017/06/15/moodle-migration-procedure.</id>
            <content type="html"><![CDATA[<p>In this post is described how to export you moodle app and import it on another environment.</p>

<h2 id="export-from-the-source-database">Export from the source database</h2>

<pre><code>     sudo -u postgres pg_dump moodle &gt; /vagrant/shared/dump/moodle-database-exported.sql
</code></pre>

<h2 id="migrate-database">Migrate database</h2>

<p>Here I sustitute the string 'moodle-dev' by 'moodle-deploy' from 'moodle-database-exported.sql' and write it to 'database-to-import.sql':</p>

<pre><code>     sed 's/moodle-dev/moodle-deploy/g' moodle-database-exported.sql &gt; database-to-import.sql
</code></pre>

<h2 id="let%27s-tar-db-and-filesystem">Let's tar db and filesystem</h2>

<pre><code>    tar -cvzf moodle-to-import.tgz database-to-import.sql moodle moodledata/
    exit
    mv ~/vagrant/vagrant-moodle/shared/moodle-to-import.tgz ~/vagrant/vagrant-moodle-deploy/shared/
</code></pre>

<h2 id="cleanup-the-target-machine">Cleanup the target machine</h2>

<p>Connect on the target machine. here target database is also named 'moodle':</p>

<pre><code>     cd /vagrant/shared
     rm -rf moodle moodledata/
     sudo -u postgres psql -c "DROP DATABASE moodle"
     sudo -u postgres psql -c "CREATE DATABASE moodle"
</code></pre>

<h2 id="import-db-and-filesystem-on-the-target-database">Import db and filesystem on the target database</h2>

<pre><code>    sudo tar -xzf moodle-to-import.tgz
    sudo -u postgres psql --set ON_ERROR_STOP=on moodle &lt; database-to-import.sql
</code></pre>

<h2 id="migrate-the-config.php-file">Migrate the config.php file</h2>

<pre><code>    sed -i 's/moodle-dev/moodle-deploy/g' moodle/config.php
</code></pre>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Configure xdebug with phpstorm with a vagrant box]]></title>
            <link href="/blog/2017/06/15/setup-xdebug-phpstorm-vagrant"/>
            <updated>2017-06-15T00:00:00+00:00</updated>
            <id>/blog/2017/06/15/setup-xdebug-phpstorm-vagrant</id>
            <content type="html"><![CDATA[<p>After loosing a few hours reconfiguring xdebug, phpstorm and vagrant, I found this <a href="https://www.theodo.fr/blog/2016/08/configure-xdebug-phpstorm-vagrant/">great ressource</a>. Here are my notes about it:</p>

<p><em>phpstorm is installed on the hostmachine and the app is running in a vagrant box.</em></p>

<h2 id="vagrant-guest-machine-setup">Vagrant guest machine setup</h2>

<pre><code>sudo apt-get install php5-xdebug
</code></pre>

<p>Edit <code>/etc/php5/mods-available/xdebug.ini</code> :</p>

<pre><code>xdebug.remote_enable=true
xdebug.remote_connect_back=true
xdebug.idekey=MY_AWESOME_KEY
</code></pre>

<h2 id="phpstorm-setup">Phpstorm setup</h2>

<h3 id="setup-%27php-remote-debug%27-configuration">Setup 'php remote debug' configuration</h3>

<p><img src="/images/xdebug/storm-xdebug-vagrant-1-remote-debug-conf.png" alt="screenshot" /></p>

<h3 id="setup-%27server%27-configuration">Setup 'server' configuration</h3>

<p><img src="/images/xdebug/storm-xdebug-vagrant-2-server-conf.png" alt="screenshot" /></p>

<h2 id="browser-plugin">Browser plugin</h2>

<ul>
<li>install a browser <a href="https://addons.mozilla.org/en-US/firefox/addon/the-easiest-xdebug/">plugin such as this one</a></li>
<li>configure the ide key, here: <code>MY_AWESOME_KEY</code></li>
<li>it is also possible to use <a href="https://www.jetbrains.com/phpstorm/marklets/">bookmarklets</a> </li>
</ul>

<h2 id="enjoy%21">Enjoy!</h2>

<ul>
<li>Puts breakpoints </li>
<li>Enable cookie using web browser extension or bookmarklet
<img src="/images/xdebug/storm-xdebug-vagrant-3-breakpoints.png" alt="screenshot" /></li>
<li>Click on the bug icon called 'debug mode'</li>
<li>You can now enjoy the debugger (inspect variables, control the execution flow)
<img src="/images/xdebug/storm-xdebug-vagrant-4-debugger-running.png" alt="screenshot" /></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Getting started with npm]]></title>
            <link href="/blog/2017/05/29/getting-started-with-npm"/>
            <updated>2017-05-29T00:00:00+00:00</updated>
            <id>/blog/2017/05/29/getting-started-with-npm</id>
            <content type="html"><![CDATA[<h2 id="npm-global-configuration-file">npm global configuration file</h2>

<pre><code>    vim ~/.npmrc
</code></pre>

<h2 id="list-npm-globally-installed-modules">list npm globally installed modules</h2>

<pre><code>    npm list -g
</code></pre>

<h2 id="install-modules-globally">Install modules globally</h2>

<pre><code>sudo npm install -g my-module

sudo npm install -g gulp-autoprefixer gulp-clean gulp-concat gulp-cssbeautify gulp-csscomb gulp-csso gulp-if gulp-jshint gulp-less gulp-load-plugins gulp-ng-annotate gulp-rename gulp-uglify minimist
ls /usr/local/lib/node_modules
</code></pre>

<h2 id="install-modules-locally">Install modules locally</h2>

<p>Modules will be installed in <code>node_modules</code> folder.</p>

<h3 id="dev-modules-with---save-dev-option">dev modules with --save-dev option</h3>

<pre><code>npm install --save-dev gulp-cssbeautify gulp-csscomb gulp-csso gulp-jshint gulp-less gulp-load-plugins gulp-rename
</code></pre>

<h3 id="non-dev-modules-with---save-option">non dev modules with --save option</h3>

<pre><code>npm install angular-i18n --save
</code></pre>

<h2 id="link-our-project-modules-to-the-global-installed-node-modules">Link our project modules to the global installed node modules</h2>

<pre><code>cd my-app
npm link gulp-autoprefixer gulp-clean gulp-concat gulp-cssbeautify gulp-csscomb gulp-csso gulp-if gulp-jshint gulp-less gulp-load-plugins gulp-ng-annotate gulp-rename gulp-uglify minimist
npm install 
</code></pre>

<h2 id="speed-up-npm">Speed up npm</h2>

<p><code>npm install</code> can be very long, so let's try to speed up that!</p>

<h3 id="disable-progress">Disable progress</h3>

<pre><code>npm config set progress false
</code></pre>

<h3 id="setting-up-a-local-cache-server">Setting up a local cache server</h3>

<p>Inspired from this <a href="http://willcodefor.beer/setup-your-own-npm-cache-server/">ressource</a>.</p>

<h4 id="installing-npm-proxy-cache">Installing npm-proxy-cache</h4>

<pre><code>sudo apt-get install -y nodejs npm
npm config set prefix '~/.npm-packages'  
export PATH="$PATH:$HOME/.npm-packages/bin"
npm install -g forever npm-proxy-cache  
ln -s /usr/bin/nodejs /usr/bin/node
</code></pre>

<h4 id="starting-the-cache-server">Starting the cache server</h4>

<pre><code>sudo forever /usr/local/lib/node_modules/npm-proxy-cache/bin/npm-proxy-cache  -e -t 600000 -h localhost
</code></pre>

<p>You should see that the server is running on 8080 port:</p>

<pre><code>[2017-05-29 13:13:11.725] [INFO] proxy - Listening on localhost:8080 [6172]
</code></pre>

<h4 id="configuring-npm-proxy-cache">Configuring npm-proxy-cache</h4>

<pre><code>npm config set proxy http://localhost:8080/  
npm config set https-proxy http://localhost:8080
npm config set strict-ssl false  
</code></pre>

<h4 id="testing-the-cache-server">Testing the cache server</h4>

<pre><code>cd my-app
rm -rf node_modules
npm install
</code></pre>

<h4 id="automating-server-boot">Automating server boot</h4>

<p>todo</p>

<h4 id="yeah%2C-it-works%21">Yeah, it works!</h4>

<pre><code>[2017-05-29 13:13:11.725] [INFO] proxy - Listening on localhost:8080 [6172]
[2017-05-29 13:18:55.662] [INFO] proxy - cache https://registry.npmjs.org/angular-route
[2017-05-29 13:18:55.679] [INFO] proxy - cache https://registry.npmjs.org/angular-i18n
[2017-05-29 13:18:55.702] [INFO] proxy - cache https://registry.npmjs.org/angularjs-datepicker
[2017-05-29 13:18:55.703] [INFO] proxy - cache https://registry.npmjs.org/bootstrap
[2017-05-29 13:18:55.711] [INFO] proxy - cache https://registry.npmjs.org/chart.js
[2017-05-29 13:18:55.714] [INFO] proxy - cache https://registry.npmjs.org/jquery
[2017-05-29 13:18:55.716] [INFO] proxy - cache https://registry.npmjs.org/isteven-angular-multiselect
[2017-05-29 13:18:55.719] [INFO] proxy - cache https://registry.npmjs.org/gulp
[2017-05-29 13:18:55.723] [INFO] proxy - cache https://registry.npmjs.org/gulp-autoprefixer
...
</code></pre>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Setting up a cool php development environment]]></title>
            <link href="/blog/2017/03/31/setting-up-a-php-cool-development-environment"/>
            <updated>2017-03-31T00:00:00+00:00</updated>
            <id>/blog/2017/03/31/setting-up-a-php-cool-development-environment</id>
            <content type="html"><![CDATA[<p>In this post, I list the components of my dev environment. This list can be useful when initializing a new project or starting a new job.</p>

<h2 id="make-use-of-a-cool-virtualisation-solution">Make use of a cool virtualisation solution</h2>

<p>I choose <a href="https://www.vagrantup.com/">Vagrant</a>. Take the time to create cool provisioning scripts. In case of problem, you will be able to set up quickly your env!
<strong>VERSION your provisioning scripts!</strong></p>

<h2 id="reproduce-the-exact-same-stack-than-the-prod-env">Reproduce the exact same stack than the prod env</h2>

<ul>
<li>OS</li>
<li>php version</li>
<li>php.ini conf: /etc/php5/apache2/php.ini &amp; /etc/php5/cli/php.ini</li>
<li>apache version</li>
<li>apache VHOST</li>
<li>db version</li>
<li>system permission</li>
</ul>

<p><strong>Keep one VM/project do not host several projects under the same VM. If you need a laboratory VM, create a dedicated one!</strong></p>

<h2 id="turn-on-debug-mode-and-error-printing">Turn on debug mode and error printing</h2>

<p>Edit in php.ini files:</p>

<pre><code>    error_reporting = E_ALL ^ E_NOTICE ^ E_WARNING
    display_errors = on        
</code></pre>

<p>Restart apache:</p>

<pre><code>    sudo service apache2 restart
</code></pre>

<h2 id="make-use-of-a-cool-source-control">Make use of a cool source control</h2>

<p>I use gitlab: git+wiki+tracker. When you commit, do not forget to make link between commit and ticket reference.</p>

<h2 id="make-use-of-a-cool-php-ide">Make use of a cool PHP IDE</h2>

<p>I use <a href="https://www.jetbrains.com/phpstorm/">PHPSTORM</a> because of:</p>

<ul>
<li>debugger integration</li>
<li>completion</li>
<li>external tools integration</li>
<li>framework integration</li>
<li>database integration</li>
<li>live templates</li>
<li>source control integration</li>
</ul>

<h2 id="set-up-a-cool-debugger">Set up a cool debugger</h2>

<p>I use XDEBUG embed in vagrant VM with PHPSTORM on host machine which is very very very nice.</p>

<p><a href="/blog/2017/06/15/setup-xdebug-phpstorm-vagrant">Look at this article</a> to setup xdebug/vagrant/phpstorm.</p>

<h2 id="set-up-a-mailer">Set up a mailer</h2>

<p>Setting up <code>sendMail</code> is quiet complicated whereas setting up <code>ssmtp</code> is easy.</p>

<p><a href="http://www.tuto-linux.com/tutoriel/ssmtp-installation-et-configuration/">Follow that tutorial to install ssmtp.</a></p>

<p>Do not forget to <a href="https://myaccount.google.com/lesssecureapps?pli=1">edit google lesssecureappsoption</a></p>

<h2 id="set-up-a-cool-build-tool">Set up a cool build tool</h2>

<p>I use <a href="https://www.phing.info/">Phing</a> to build and deploy.</p>

<pre><code>wget -q http://www.phing.info/get/phing-latest.phar
sudo mv phing-latest.phar /usr/local/lib/phing.phar
chmod +x /usr/local/lib/phing.phar
sudo ln -s /usr/local/lib/phing.phar /usr/local/bin/phing

pear install VersionControl_Git-alpha
</code></pre>

<h2 id="things-that-must-be-under-source-control">Things that must be under source control</h2>

<ul>
<li>Provisioning script</li>
<li>Source code</li>
<li>Build job</li>
<li><em>VM configuration (alias, conf file) can also be versioned.</em>  </li>
</ul>

<p><strong>With that you should be able to automate deployment and rebuild solution from scratch!</strong></p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Consuming a Moodle webservice]]></title>
            <link href="/blog/2017/03/29/consumming-a-moodle-webservice"/>
            <updated>2017-03-29T00:00:00+00:00</updated>
            <id>/blog/2017/03/29/consumming-a-moodle-webservice</id>
            <content type="html"><![CDATA[<p>This post describes how to consume a Moodle core webservice.</p>

<h2 id="set-up-moodle">Set up Moodle</h2>

<h3 id="enable-rest-protocol">Enable REST protocol</h3>

<p>In <code>Dashboard / ► Site administration / ► Plugins / ► Web services / ► Manage protocols</code></p>

<ul>
<li>enable REST protocol.</li>
<li>enable <code>Web services documentation</code> too.</li>
</ul>

<h3 id="create-a-custom-webservice">Create a custom webservice</h3>

<p>In <code>Dashboard / ► Site administration / ► Plugins / ► Web services / ► External services</code></p>

<ul>
<li>add a custom services named <code>test ws</code> for example</li>
</ul>

<h3 id="create-a-custom-user-for-webservice">Create a custom user for webservice</h3>

<p>In <code>Dashboard / ► Site administration / ► Users / ► Accounts / ► Add a new user</code></p>

<ul>
<li>create a <code>wsuser</code> user.</li>
</ul>

<h3 id="create-a-custom-role-for-webservice">Create a custom role for webservice</h3>

<p>In <code>Dashboard / ► Site administration / ► Users / ► Permissions / ► Define roles</code></p>

<ul>
<li>create a <code>ws_user_role</code>.</li>
<li>allow at least <code>Create a web service token</code> </li>
</ul>

<h3 id="assign-role-to-user">Assign role to user</h3>

<p><code>Dashboard / ► Site administration / ► Users / ► Permissions / ► Assign system roles</code></p>

<h2 id="test">Test</h2>

<h3 id="get-a-cool-rest-client">Get a cool REST client</h3>

<p>Getting a user friendly REST client is important, <a href="https://www.getpostman.com/">POSTMAN is pretty cool</a>.</p>

<h3 id="get-a-token">Get a token</h3>

<p>Make a GET request to get a token.</p>

<p>For instance:<code>https://192.168.33.10/login/token.php?service=test_ws&amp;username=wsuser&amp;password=Wsuser123456-</code>. You should get:</p>

<pre><code>        {
          "token": "19f315a127eef1f7f381da40fefd7b75"
        }
</code></pre>

<h3 id="consuming-a-moodle-core-webservice">Consuming a Moodle core webservice</h3>

<p>Now we get a token! So let's consume the <code>core_course_get_courses</code> WS. Results in JSON with <code>moodlewsrestformat=json</code>.</p>

<p>Make a POST request on <code>https://192.168.33.10/webservice/rest/server.php?wstoken=19f315a127eef1f7f381da40fefd7b75&amp;wsfunction=core_course_get_courses&amp;options[ids][0]=1&amp;moodlewsrestformat=json</code>. You should get :</p>

<pre><code>        [
          {
            "id": 1,
            "shortname": "test",
            "categoryid": 0,
            "fullname": "Site de test",
            "summary": "",
            "summaryformat": 1,
            "format": "site",
            "startdate": 0,
            "numsections": 1
          }
        ]
</code></pre>

<h3 id="api-documentation">API DOCUMENTATION</h3>

<p>This can be found at <code>Dashboard / ► Site administration / ► Plugins / ► Web services / ► API Documentation</code></p>
]]></content>
        </entry>
    </feed>